
01_UART_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b30  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08001cb8  08001cb8  00002cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d10  08001d10  00003010  2**0
                  CONTENTS
  4 .ARM          00000008  08001d10  08001d10  00002d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001d18  08001d18  00003010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d18  08001d18  00002d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001d1c  08001d1c  00002d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08001d20  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000010  08001d30  00003010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08001d30  000030b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008568  00000000  00000000  00003040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001210  00000000  00000000  0000b5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000640  00000000  00000000  0000c7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004cc  00000000  00000000  0000cdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024f2f  00000000  00000000  0000d2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007f0d  00000000  00000000  000321f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e60ce  00000000  00000000  0003a100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001201ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018f0  00000000  00000000  00120214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00121b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001ca0 	.word	0x08001ca0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08001ca0 	.word	0x08001ca0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <SysTick_Handler>:
 *      Author: nafiz
 */


void SysTick_Handler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004cc:	f000 f9a4 	bl	8000818 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004d0:	f000 fad3 	bl	8000a7a <HAL_SYSTICK_IRQHandler>
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <main>:
UART_HandleTypeDef huart2;

char *user_data = "The application is running\r\n";

int main(void)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b09d      	sub	sp, #116	@ 0x74
 80004dc:	af00      	add	r7, sp, #0
	HAL_Init();
 80004de:	f000 f93f 	bl	8000760 <HAL_Init>
	SystemClockConfig();
 80004e2:	f000 f855 	bl	8000590 <SystemClockConfig>
	UART2_Init();
 80004e6:	f000 f85b 	bl	80005a0 <UART2_Init>

	uint16_t len_data = strlen(user_data);
 80004ea:	4b27      	ldr	r3, [pc, #156]	@ (8000588 <main+0xb0>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4618      	mov	r0, r3
 80004f0:	f7ff fe6a 	bl	80001c8 <strlen>
 80004f4:	4603      	mov	r3, r0
 80004f6:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	if(HAL_UART_Transmit(&huart2, (uint8_t*) user_data, len_data, HAL_MAX_DELAY) != HAL_OK)
 80004fa:	4b23      	ldr	r3, [pc, #140]	@ (8000588 <main+0xb0>)
 80004fc:	6819      	ldr	r1, [r3, #0]
 80004fe:	f8b7 206a 	ldrh.w	r2, [r7, #106]	@ 0x6a
 8000502:	f04f 33ff 	mov.w	r3, #4294967295
 8000506:	4821      	ldr	r0, [pc, #132]	@ (800058c <main+0xb4>)
 8000508:	f000 fd80 	bl	800100c <HAL_UART_Transmit>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <main+0x3e>
	{
		Error_Handler();
 8000512:	f000 f880 	bl	8000616 <Error_Handler>
	}

	uint8_t rcvd_data;
	uint8_t data_buffer[100];
	uint32_t count = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	66fb      	str	r3, [r7, #108]	@ 0x6c

	while(1){
		HAL_UART_Receive(&huart2, &rcvd_data, 1, HAL_MAX_DELAY);
 800051a:	f107 0169 	add.w	r1, r7, #105	@ 0x69
 800051e:	f04f 33ff 	mov.w	r3, #4294967295
 8000522:	2201      	movs	r2, #1
 8000524:	4819      	ldr	r0, [pc, #100]	@ (800058c <main+0xb4>)
 8000526:	f000 fdfa 	bl	800111e <HAL_UART_Receive>
		if(rcvd_data == '\r'){
 800052a:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 800052e:	2b0d      	cmp	r3, #13
 8000530:	d00f      	beq.n	8000552 <main+0x7a>
			break;
		}
		else{
			data_buffer[count++] = convert_to_capital(rcvd_data);
 8000532:	f897 2069 	ldrb.w	r2, [r7, #105]	@ 0x69
 8000536:	6efc      	ldr	r4, [r7, #108]	@ 0x6c
 8000538:	1c63      	adds	r3, r4, #1
 800053a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800053c:	4610      	mov	r0, r2
 800053e:	f000 f855 	bl	80005ec <convert_to_capital>
 8000542:	4603      	mov	r3, r0
 8000544:	461a      	mov	r2, r3
 8000546:	f104 0370 	add.w	r3, r4, #112	@ 0x70
 800054a:	443b      	add	r3, r7
 800054c:	f803 2c6c 	strb.w	r2, [r3, #-108]
		HAL_UART_Receive(&huart2, &rcvd_data, 1, HAL_MAX_DELAY);
 8000550:	e7e3      	b.n	800051a <main+0x42>
			break;
 8000552:	bf00      	nop
		}
	}
	data_buffer[count++] = '\r';
 8000554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800055a:	3370      	adds	r3, #112	@ 0x70
 800055c:	443b      	add	r3, r7
 800055e:	220d      	movs	r2, #13
 8000560:	f803 2c6c 	strb.w	r2, [r3, #-108]
	if(HAL_UART_Transmit(&huart2, (uint8_t*) data_buffer, count, HAL_MAX_DELAY) != HAL_OK)
 8000564:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000566:	b29a      	uxth	r2, r3
 8000568:	1d39      	adds	r1, r7, #4
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
 800056e:	4807      	ldr	r0, [pc, #28]	@ (800058c <main+0xb4>)
 8000570:	f000 fd4c 	bl	800100c <HAL_UART_Transmit>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <main+0xa6>

	return 0;
 800057a:	2300      	movs	r3, #0
 800057c:	e000      	b.n	8000580 <main+0xa8>
 800057e:	2300      	movs	r3, #0
}
 8000580:	4618      	mov	r0, r3
 8000582:	3774      	adds	r7, #116	@ 0x74
 8000584:	46bd      	mov	sp, r7
 8000586:	bd90      	pop	{r4, r7, pc}
 8000588:	20000000 	.word	0x20000000
 800058c:	2000002c 	.word	0x2000002c

08000590 <SystemClockConfig>:


//You only use when you need special clock setting
void SystemClockConfig(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
	...

080005a0 <UART2_Init>:

// High level initialisation of peripheral
void UART2_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <UART2_Init+0x44>)
 80005a6:	4a10      	ldr	r2, [pc, #64]	@ (80005e8 <UART2_Init+0x48>)
 80005a8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	@ (80005e4 <UART2_Init+0x44>)
 80005ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005b0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005b2:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <UART2_Init+0x44>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80005b8:	4b0a      	ldr	r3, [pc, #40]	@ (80005e4 <UART2_Init+0x44>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80005be:	4b09      	ldr	r3, [pc, #36]	@ (80005e4 <UART2_Init+0x44>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c4:	4b07      	ldr	r3, [pc, #28]	@ (80005e4 <UART2_Init+0x44>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80005ca:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <UART2_Init+0x44>)
 80005cc:	220c      	movs	r2, #12
 80005ce:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2) != HAL_OK){
 80005d0:	4804      	ldr	r0, [pc, #16]	@ (80005e4 <UART2_Init+0x44>)
 80005d2:	f000 fccd 	bl	8000f70 <HAL_UART_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <UART2_Init+0x40>
		//There is a problem
		Error_Handler();
 80005dc:	f000 f81b 	bl	8000616 <Error_Handler>
	}
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	2000002c 	.word	0x2000002c
 80005e8:	40004400 	.word	0x40004400

080005ec <convert_to_capital>:


uint8_t convert_to_capital(uint8_t data)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
	if(data >= 'a' && data <= 'z')
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	2b60      	cmp	r3, #96	@ 0x60
 80005fa:	d905      	bls.n	8000608 <convert_to_capital+0x1c>
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2b7a      	cmp	r3, #122	@ 0x7a
 8000600:	d802      	bhi.n	8000608 <convert_to_capital+0x1c>
	{
		//data = data - ('a' - 'A');
		data -= 32;
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	3b20      	subs	r3, #32
 8000606:	71fb      	strb	r3, [r7, #7]
	}

	return data;
 8000608:	79fb      	ldrb	r3, [r7, #7]
}
 800060a:	4618      	mov	r0, r3
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <Error_Handler>:


void Error_Handler(){
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
	while(1){
 800061a:	bf00      	nop
 800061c:	e7fd      	b.n	800061a <Error_Handler+0x4>
	...

08000620 <HAL_MspInit>:

#include "stm32l4xx_hal.h"


void HAL_MspInit(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
	//Here we will do low level processor specific inits
	//1. Setup the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f9e7 	bl	80009f8 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	//Bit 18: USGFAULTENA = Usage fault system exception
	//Bit 17: BUSFAULTENA = Bus fault system exception
	//Bit 16: MEMFAULTENA = Memory fault system exception
	SCB->SHCSR = 0x7 << 16;
 800062a:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <HAL_MspInit+0x3c>)
 800062c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000630:	625a      	str	r2, [r3, #36]	@ 0x24

	//3. Configure the priority for the system exceptions
	// Lower number mean higher priority
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	2100      	movs	r1, #0
 8000636:	f06f 000b 	mvn.w	r0, #11
 800063a:	f000 f9e8 	bl	8000a0e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2100      	movs	r1, #0
 8000642:	f06f 000a 	mvn.w	r0, #10
 8000646:	f000 f9e2 	bl	8000a0e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	f06f 0009 	mvn.w	r0, #9
 8000652:	f000 f9dc 	bl	8000a0e <HAL_NVIC_SetPriority>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <HAL_UART_MspInit>:

//When the peripheral is not working as expected, then this function should be the first debug spot
//Most people do mistakes in configuring the low level peripheral settings
//Low level initialization of peripheral
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	@ 0x28
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
	//We are going to do the low level initialization of the UART2 peripheral

	//1. Enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 8000668:	4b1e      	ldr	r3, [pc, #120]	@ (80006e4 <HAL_UART_MspInit+0x84>)
 800066a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800066c:	4a1d      	ldr	r2, [pc, #116]	@ (80006e4 <HAL_UART_MspInit+0x84>)
 800066e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000672:	6593      	str	r3, [r2, #88]	@ 0x58
 8000674:	4b1b      	ldr	r3, [pc, #108]	@ (80006e4 <HAL_UART_MspInit+0x84>)
 8000676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800067c:	613b      	str	r3, [r7, #16]
 800067e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <HAL_UART_MspInit+0x84>)
 8000682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000684:	4a17      	ldr	r2, [pc, #92]	@ (80006e4 <HAL_UART_MspInit+0x84>)
 8000686:	f043 0301 	orr.w	r3, r3, #1
 800068a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068c:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <HAL_UART_MspInit+0x84>)
 800068e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]

	//2. Do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2;				//UART2 Tx
 8000698:	2304      	movs	r3, #4
 800069a:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 800069c:	2302      	movs	r3, #2
 800069e:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 80006a8:	2307      	movs	r3, #7
 80006aa:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b6:	f000 f9ed 	bl	8000a94 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3;				//UART2 Rx
 80006ba:	2308      	movs	r3, #8
 80006bc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c8:	f000 f9e4 	bl	8000a94 <HAL_GPIO_Init>

	//3. Enable the IRQ and setup the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006cc:	2026      	movs	r0, #38	@ 0x26
 80006ce:	f000 f9ba 	bl	8000a46 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	210f      	movs	r1, #15
 80006d6:	2026      	movs	r0, #38	@ 0x26
 80006d8:	f000 f999 	bl	8000a0e <HAL_NVIC_SetPriority>
}
 80006dc:	bf00      	nop
 80006de:	3728      	adds	r7, #40	@ 0x28
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000

080006e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <SystemInit+0x20>)
 80006ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006f2:	4a05      	ldr	r2, [pc, #20]	@ (8000708 <SystemInit+0x20>)
 80006f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800070c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000744 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000710:	f7ff ffea 	bl	80006e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000714:	480c      	ldr	r0, [pc, #48]	@ (8000748 <LoopForever+0x6>)
  ldr r1, =_edata
 8000716:	490d      	ldr	r1, [pc, #52]	@ (800074c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000718:	4a0d      	ldr	r2, [pc, #52]	@ (8000750 <LoopForever+0xe>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800071c:	e002      	b.n	8000724 <LoopCopyDataInit>

0800071e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000722:	3304      	adds	r3, #4

08000724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000728:	d3f9      	bcc.n	800071e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072a:	4a0a      	ldr	r2, [pc, #40]	@ (8000754 <LoopForever+0x12>)
  ldr r4, =_ebss
 800072c:	4c0a      	ldr	r4, [pc, #40]	@ (8000758 <LoopForever+0x16>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000730:	e001      	b.n	8000736 <LoopFillZerobss>

08000732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000734:	3204      	adds	r2, #4

08000736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000738:	d3fb      	bcc.n	8000732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800073a:	f001 fa8d 	bl	8001c58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800073e:	f7ff fecb 	bl	80004d8 <main>

08000742 <LoopForever>:

LoopForever:
    b LoopForever
 8000742:	e7fe      	b.n	8000742 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000744:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800074c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000750:	08001d20 	.word	0x08001d20
  ldr r2, =_sbss
 8000754:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000758:	200000b8 	.word	0x200000b8

0800075c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800075c:	e7fe      	b.n	800075c <ADC1_2_IRQHandler>
	...

08000760 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000766:	2300      	movs	r3, #0
 8000768:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800076a:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <HAL_Init+0x3c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a0b      	ldr	r2, [pc, #44]	@ (800079c <HAL_Init+0x3c>)
 8000770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000774:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000776:	2003      	movs	r0, #3
 8000778:	f000 f93e 	bl	80009f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800077c:	2000      	movs	r0, #0
 800077e:	f000 f80f 	bl	80007a0 <HAL_InitTick>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d002      	beq.n	800078e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000788:	2301      	movs	r3, #1
 800078a:	71fb      	strb	r3, [r7, #7]
 800078c:	e001      	b.n	8000792 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800078e:	f7ff ff47 	bl	8000620 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000792:	79fb      	ldrb	r3, [r7, #7]
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40022000 	.word	0x40022000

080007a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007a8:	2300      	movs	r3, #0
 80007aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007ac:	4b17      	ldr	r3, [pc, #92]	@ (800080c <HAL_InitTick+0x6c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d023      	beq.n	80007fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007b4:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <HAL_InitTick+0x70>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b14      	ldr	r3, [pc, #80]	@ (800080c <HAL_InitTick+0x6c>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f949 	bl	8000a62 <HAL_SYSTICK_Config>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d10f      	bne.n	80007f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b0f      	cmp	r3, #15
 80007da:	d809      	bhi.n	80007f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007dc:	2200      	movs	r2, #0
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295
 80007e4:	f000 f913 	bl	8000a0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000814 <HAL_InitTick+0x74>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6013      	str	r3, [r2, #0]
 80007ee:	e007      	b.n	8000800 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007f0:	2301      	movs	r3, #1
 80007f2:	73fb      	strb	r3, [r7, #15]
 80007f4:	e004      	b.n	8000800 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	73fb      	strb	r3, [r7, #15]
 80007fa:	e001      	b.n	8000800 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007fc:	2301      	movs	r3, #1
 80007fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000800:	7bfb      	ldrb	r3, [r7, #15]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000000c 	.word	0x2000000c
 8000810:	20000004 	.word	0x20000004
 8000814:	20000008 	.word	0x20000008

08000818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800081c:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <HAL_IncTick+0x20>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	4b06      	ldr	r3, [pc, #24]	@ (800083c <HAL_IncTick+0x24>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4413      	add	r3, r2
 8000828:	4a04      	ldr	r2, [pc, #16]	@ (800083c <HAL_IncTick+0x24>)
 800082a:	6013      	str	r3, [r2, #0]
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	2000000c 	.word	0x2000000c
 800083c:	200000b4 	.word	0x200000b4

08000840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return uwTick;
 8000844:	4b03      	ldr	r3, [pc, #12]	@ (8000854 <HAL_GetTick+0x14>)
 8000846:	681b      	ldr	r3, [r3, #0]
}
 8000848:	4618      	mov	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	200000b4 	.word	0x200000b4

08000858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <__NVIC_SetPriorityGrouping+0x44>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000874:	4013      	ands	r3, r2
 8000876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000880:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800088a:	4a04      	ldr	r2, [pc, #16]	@ (800089c <__NVIC_SetPriorityGrouping+0x44>)
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	60d3      	str	r3, [r2, #12]
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a4:	4b04      	ldr	r3, [pc, #16]	@ (80008b8 <__NVIC_GetPriorityGrouping+0x18>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	0a1b      	lsrs	r3, r3, #8
 80008aa:	f003 0307 	and.w	r3, r3, #7
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	db0b      	blt.n	80008e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	f003 021f 	and.w	r2, r3, #31
 80008d4:	4907      	ldr	r1, [pc, #28]	@ (80008f4 <__NVIC_EnableIRQ+0x38>)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	095b      	lsrs	r3, r3, #5
 80008dc:	2001      	movs	r0, #1
 80008de:	fa00 f202 	lsl.w	r2, r0, r2
 80008e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000e100 	.word	0xe000e100

080008f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	6039      	str	r1, [r7, #0]
 8000902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000908:	2b00      	cmp	r3, #0
 800090a:	db0a      	blt.n	8000922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	b2da      	uxtb	r2, r3
 8000910:	490c      	ldr	r1, [pc, #48]	@ (8000944 <__NVIC_SetPriority+0x4c>)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	0112      	lsls	r2, r2, #4
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	440b      	add	r3, r1
 800091c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000920:	e00a      	b.n	8000938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4908      	ldr	r1, [pc, #32]	@ (8000948 <__NVIC_SetPriority+0x50>)
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	f003 030f 	and.w	r3, r3, #15
 800092e:	3b04      	subs	r3, #4
 8000930:	0112      	lsls	r2, r2, #4
 8000932:	b2d2      	uxtb	r2, r2
 8000934:	440b      	add	r3, r1
 8000936:	761a      	strb	r2, [r3, #24]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	e000e100 	.word	0xe000e100
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094c:	b480      	push	{r7}
 800094e:	b089      	sub	sp, #36	@ 0x24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	f1c3 0307 	rsb	r3, r3, #7
 8000966:	2b04      	cmp	r3, #4
 8000968:	bf28      	it	cs
 800096a:	2304      	movcs	r3, #4
 800096c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3304      	adds	r3, #4
 8000972:	2b06      	cmp	r3, #6
 8000974:	d902      	bls.n	800097c <NVIC_EncodePriority+0x30>
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	3b03      	subs	r3, #3
 800097a:	e000      	b.n	800097e <NVIC_EncodePriority+0x32>
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	f04f 32ff 	mov.w	r2, #4294967295
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43da      	mvns	r2, r3
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	401a      	ands	r2, r3
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000994:	f04f 31ff 	mov.w	r1, #4294967295
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	fa01 f303 	lsl.w	r3, r1, r3
 800099e:	43d9      	mvns	r1, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a4:	4313      	orrs	r3, r2
         );
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3724      	adds	r7, #36	@ 0x24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
	...

080009b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3b01      	subs	r3, #1
 80009c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009c4:	d301      	bcc.n	80009ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c6:	2301      	movs	r3, #1
 80009c8:	e00f      	b.n	80009ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ca:	4a0a      	ldr	r2, [pc, #40]	@ (80009f4 <SysTick_Config+0x40>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009d2:	210f      	movs	r1, #15
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	f7ff ff8e 	bl	80008f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009dc:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <SysTick_Config+0x40>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009e2:	4b04      	ldr	r3, [pc, #16]	@ (80009f4 <SysTick_Config+0x40>)
 80009e4:	2207      	movs	r2, #7
 80009e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	e000e010 	.word	0xe000e010

080009f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff ff29 	bl	8000858 <__NVIC_SetPriorityGrouping>
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b086      	sub	sp, #24
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	4603      	mov	r3, r0
 8000a16:	60b9      	str	r1, [r7, #8]
 8000a18:	607a      	str	r2, [r7, #4]
 8000a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a20:	f7ff ff3e 	bl	80008a0 <__NVIC_GetPriorityGrouping>
 8000a24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	68b9      	ldr	r1, [r7, #8]
 8000a2a:	6978      	ldr	r0, [r7, #20]
 8000a2c:	f7ff ff8e 	bl	800094c <NVIC_EncodePriority>
 8000a30:	4602      	mov	r2, r0
 8000a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a36:	4611      	mov	r1, r2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff5d 	bl	80008f8 <__NVIC_SetPriority>
}
 8000a3e:	bf00      	nop
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff ff31 	bl	80008bc <__NVIC_EnableIRQ>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b082      	sub	sp, #8
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff ffa2 	bl	80009b4 <SysTick_Config>
 8000a70:	4603      	mov	r3, r0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a7e:	f000 f802 	bl	8000a86 <HAL_SYSTICK_Callback>
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa2:	e17f      	b.n	8000da4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f000 8171 	beq.w	8000d9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f003 0303 	and.w	r3, r3, #3
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d005      	beq.n	8000ad4 <HAL_GPIO_Init+0x40>
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f003 0303 	and.w	r3, r3, #3
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d130      	bne.n	8000b36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	2203      	movs	r2, #3
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	68da      	ldr	r2, [r3, #12]
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43db      	mvns	r3, r3
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4013      	ands	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	091b      	lsrs	r3, r3, #4
 8000b20:	f003 0201 	and.w	r2, r3, #1
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f003 0303 	and.w	r3, r3, #3
 8000b3e:	2b03      	cmp	r3, #3
 8000b40:	d118      	bne.n	8000b74 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000b48:	2201      	movs	r2, #1
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	f003 0201 	and.w	r2, r3, #1
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 0303 	and.w	r3, r3, #3
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d017      	beq.n	8000bb0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 0303 	and.w	r3, r3, #3
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d123      	bne.n	8000c04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	08da      	lsrs	r2, r3, #3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3208      	adds	r2, #8
 8000bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	f003 0307 	and.w	r3, r3, #7
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	220f      	movs	r2, #15
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	691a      	ldr	r2, [r3, #16]
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	08da      	lsrs	r2, r3, #3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	3208      	adds	r2, #8
 8000bfe:	6939      	ldr	r1, [r7, #16]
 8000c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	2203      	movs	r2, #3
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 0203 	and.w	r2, r3, #3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f000 80ac 	beq.w	8000d9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	4b5f      	ldr	r3, [pc, #380]	@ (8000dc4 <HAL_GPIO_Init+0x330>)
 8000c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c4a:	4a5e      	ldr	r2, [pc, #376]	@ (8000dc4 <HAL_GPIO_Init+0x330>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c52:	4b5c      	ldr	r3, [pc, #368]	@ (8000dc4 <HAL_GPIO_Init+0x330>)
 8000c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c5e:	4a5a      	ldr	r2, [pc, #360]	@ (8000dc8 <HAL_GPIO_Init+0x334>)
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	3302      	adds	r3, #2
 8000c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	f003 0303 	and.w	r3, r3, #3
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	220f      	movs	r2, #15
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c88:	d025      	beq.n	8000cd6 <HAL_GPIO_Init+0x242>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a4f      	ldr	r2, [pc, #316]	@ (8000dcc <HAL_GPIO_Init+0x338>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d01f      	beq.n	8000cd2 <HAL_GPIO_Init+0x23e>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a4e      	ldr	r2, [pc, #312]	@ (8000dd0 <HAL_GPIO_Init+0x33c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d019      	beq.n	8000cce <HAL_GPIO_Init+0x23a>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a4d      	ldr	r2, [pc, #308]	@ (8000dd4 <HAL_GPIO_Init+0x340>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d013      	beq.n	8000cca <HAL_GPIO_Init+0x236>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a4c      	ldr	r2, [pc, #304]	@ (8000dd8 <HAL_GPIO_Init+0x344>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d00d      	beq.n	8000cc6 <HAL_GPIO_Init+0x232>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a4b      	ldr	r2, [pc, #300]	@ (8000ddc <HAL_GPIO_Init+0x348>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d007      	beq.n	8000cc2 <HAL_GPIO_Init+0x22e>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a4a      	ldr	r2, [pc, #296]	@ (8000de0 <HAL_GPIO_Init+0x34c>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d101      	bne.n	8000cbe <HAL_GPIO_Init+0x22a>
 8000cba:	2306      	movs	r3, #6
 8000cbc:	e00c      	b.n	8000cd8 <HAL_GPIO_Init+0x244>
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	e00a      	b.n	8000cd8 <HAL_GPIO_Init+0x244>
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	e008      	b.n	8000cd8 <HAL_GPIO_Init+0x244>
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	e006      	b.n	8000cd8 <HAL_GPIO_Init+0x244>
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e004      	b.n	8000cd8 <HAL_GPIO_Init+0x244>
 8000cce:	2302      	movs	r3, #2
 8000cd0:	e002      	b.n	8000cd8 <HAL_GPIO_Init+0x244>
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e000      	b.n	8000cd8 <HAL_GPIO_Init+0x244>
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	f002 0203 	and.w	r2, r2, #3
 8000cde:	0092      	lsls	r2, r2, #2
 8000ce0:	4093      	lsls	r3, r2
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ce8:	4937      	ldr	r1, [pc, #220]	@ (8000dc8 <HAL_GPIO_Init+0x334>)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	089b      	lsrs	r3, r3, #2
 8000cee:	3302      	adds	r3, #2
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8000de4 <HAL_GPIO_Init+0x350>)
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d003      	beq.n	8000d1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d1a:	4a32      	ldr	r2, [pc, #200]	@ (8000de4 <HAL_GPIO_Init+0x350>)
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d20:	4b30      	ldr	r3, [pc, #192]	@ (8000de4 <HAL_GPIO_Init+0x350>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d003      	beq.n	8000d44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d44:	4a27      	ldr	r2, [pc, #156]	@ (8000de4 <HAL_GPIO_Init+0x350>)
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d4a:	4b26      	ldr	r3, [pc, #152]	@ (8000de4 <HAL_GPIO_Init+0x350>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8000de4 <HAL_GPIO_Init+0x350>)
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <HAL_GPIO_Init+0x350>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d003      	beq.n	8000d98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d98:	4a12      	ldr	r2, [pc, #72]	@ (8000de4 <HAL_GPIO_Init+0x350>)
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	3301      	adds	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa22 f303 	lsr.w	r3, r2, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f47f ae78 	bne.w	8000aa4 <HAL_GPIO_Init+0x10>
  }
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	371c      	adds	r7, #28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40010000 	.word	0x40010000
 8000dcc:	48000400 	.word	0x48000400
 8000dd0:	48000800 	.word	0x48000800
 8000dd4:	48000c00 	.word	0x48000c00
 8000dd8:	48001000 	.word	0x48001000
 8000ddc:	48001400 	.word	0x48001400
 8000de0:	48001800 	.word	0x48001800
 8000de4:	40010400 	.word	0x40010400

08000de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	@ 0x24
 8000dec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000df6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f003 030c 	and.w	r3, r3, #12
 8000dfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e00:	4b3b      	ldr	r3, [pc, #236]	@ (8000ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d005      	beq.n	8000e1c <HAL_RCC_GetSysClockFreq+0x34>
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	2b0c      	cmp	r3, #12
 8000e14:	d121      	bne.n	8000e5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d11e      	bne.n	8000e5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000e1c:	4b34      	ldr	r3, [pc, #208]	@ (8000ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f003 0308 	and.w	r3, r3, #8
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d107      	bne.n	8000e38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000e28:	4b31      	ldr	r3, [pc, #196]	@ (8000ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e2e:	0a1b      	lsrs	r3, r3, #8
 8000e30:	f003 030f 	and.w	r3, r3, #15
 8000e34:	61fb      	str	r3, [r7, #28]
 8000e36:	e005      	b.n	8000e44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000e38:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	091b      	lsrs	r3, r3, #4
 8000e3e:	f003 030f 	and.w	r3, r3, #15
 8000e42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8000e44:	4a2b      	ldr	r2, [pc, #172]	@ (8000ef4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d10d      	bne.n	8000e70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e58:	e00a      	b.n	8000e70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	2b04      	cmp	r3, #4
 8000e5e:	d102      	bne.n	8000e66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8000e60:	4b25      	ldr	r3, [pc, #148]	@ (8000ef8 <HAL_RCC_GetSysClockFreq+0x110>)
 8000e62:	61bb      	str	r3, [r7, #24]
 8000e64:	e004      	b.n	8000e70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	2b08      	cmp	r3, #8
 8000e6a:	d101      	bne.n	8000e70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8000e6c:	4b23      	ldr	r3, [pc, #140]	@ (8000efc <HAL_RCC_GetSysClockFreq+0x114>)
 8000e6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	2b0c      	cmp	r3, #12
 8000e74:	d134      	bne.n	8000ee0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000e76:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d003      	beq.n	8000e8e <HAL_RCC_GetSysClockFreq+0xa6>
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d003      	beq.n	8000e94 <HAL_RCC_GetSysClockFreq+0xac>
 8000e8c:	e005      	b.n	8000e9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef8 <HAL_RCC_GetSysClockFreq+0x110>)
 8000e90:	617b      	str	r3, [r7, #20]
      break;
 8000e92:	e005      	b.n	8000ea0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8000e94:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <HAL_RCC_GetSysClockFreq+0x114>)
 8000e96:	617b      	str	r3, [r7, #20]
      break;
 8000e98:	e002      	b.n	8000ea0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	617b      	str	r3, [r7, #20]
      break;
 8000e9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000ea0:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	091b      	lsrs	r3, r3, #4
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	3301      	adds	r3, #1
 8000eac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000eae:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	0a1b      	lsrs	r3, r3, #8
 8000eb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	fb03 f202 	mul.w	r2, r3, r2
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	0e5b      	lsrs	r3, r3, #25
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8000ee0:	69bb      	ldr	r3, [r7, #24]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3724      	adds	r7, #36	@ 0x24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	08001ce0 	.word	0x08001ce0
 8000ef8:	00f42400 	.word	0x00f42400
 8000efc:	007a1200 	.word	0x007a1200

08000f00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f04:	4b03      	ldr	r3, [pc, #12]	@ (8000f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000004 	.word	0x20000004

08000f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8000f1c:	f7ff fff0 	bl	8000f00 <HAL_RCC_GetHCLKFreq>
 8000f20:	4602      	mov	r2, r0
 8000f22:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	0a1b      	lsrs	r3, r3, #8
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	4904      	ldr	r1, [pc, #16]	@ (8000f40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000f2e:	5ccb      	ldrb	r3, [r1, r3]
 8000f30:	f003 031f 	and.w	r3, r3, #31
 8000f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	08001cd8 	.word	0x08001cd8

08000f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8000f48:	f7ff ffda 	bl	8000f00 <HAL_RCC_GetHCLKFreq>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	0adb      	lsrs	r3, r3, #11
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	4904      	ldr	r1, [pc, #16]	@ (8000f6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8000f5a:	5ccb      	ldrb	r3, [r1, r3]
 8000f5c:	f003 031f 	and.w	r3, r3, #31
 8000f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	08001cd8 	.word	0x08001cd8

08000f70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e040      	b.n	8001004 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d106      	bne.n	8000f98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff fb64 	bl	8000660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2224      	movs	r2, #36	@ 0x24
 8000f9c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f022 0201 	bic.w	r2, r2, #1
 8000fac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d002      	beq.n	8000fbc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 fc32 	bl	8001820 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 f977 	bl	80012b0 <UART_SetConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d101      	bne.n	8000fcc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e01b      	b.n	8001004 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8000fda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8000fea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 0201 	orr.w	r2, r2, #1
 8000ffa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f000 fcb1 	bl	8001964 <UART_CheckIdleState>
 8001002:	4603      	mov	r3, r0
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	@ 0x28
 8001010:	af02      	add	r7, sp, #8
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	4613      	mov	r3, r2
 800101a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001020:	2b20      	cmp	r3, #32
 8001022:	d177      	bne.n	8001114 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d002      	beq.n	8001030 <HAL_UART_Transmit+0x24>
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d101      	bne.n	8001034 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e070      	b.n	8001116 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2200      	movs	r2, #0
 8001038:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2221      	movs	r2, #33	@ 0x21
 8001040:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001042:	f7ff fbfd 	bl	8000840 <HAL_GetTick>
 8001046:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	88fa      	ldrh	r2, [r7, #6]
 800104c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	88fa      	ldrh	r2, [r7, #6]
 8001054:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001060:	d108      	bne.n	8001074 <HAL_UART_Transmit+0x68>
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d104      	bne.n	8001074 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	61bb      	str	r3, [r7, #24]
 8001072:	e003      	b.n	800107c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800107c:	e02f      	b.n	80010de <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	2200      	movs	r2, #0
 8001086:	2180      	movs	r1, #128	@ 0x80
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f000 fd13 	bl	8001ab4 <UART_WaitOnFlagUntilTimeout>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d004      	beq.n	800109e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2220      	movs	r2, #32
 8001098:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e03b      	b.n	8001116 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d10b      	bne.n	80010bc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	881a      	ldrh	r2, [r3, #0]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010b0:	b292      	uxth	r2, r2
 80010b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	3302      	adds	r3, #2
 80010b8:	61bb      	str	r3, [r7, #24]
 80010ba:	e007      	b.n	80010cc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	781a      	ldrb	r2, [r3, #0]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3301      	adds	r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	3b01      	subs	r3, #1
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1c9      	bne.n	800107e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	2200      	movs	r2, #0
 80010f2:	2140      	movs	r1, #64	@ 0x40
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	f000 fcdd 	bl	8001ab4 <UART_WaitOnFlagUntilTimeout>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d004      	beq.n	800110a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2220      	movs	r2, #32
 8001104:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e005      	b.n	8001116 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2220      	movs	r2, #32
 800110e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001110:	2300      	movs	r3, #0
 8001112:	e000      	b.n	8001116 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8001114:	2302      	movs	r3, #2
  }
}
 8001116:	4618      	mov	r0, r3
 8001118:	3720      	adds	r7, #32
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b08a      	sub	sp, #40	@ 0x28
 8001122:	af02      	add	r7, sp, #8
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	4613      	mov	r3, r2
 800112c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001134:	2b20      	cmp	r3, #32
 8001136:	f040 80b6 	bne.w	80012a6 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d002      	beq.n	8001146 <HAL_UART_Receive+0x28>
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e0ae      	b.n	80012a8 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2200      	movs	r2, #0
 800114e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2222      	movs	r2, #34	@ 0x22
 8001156:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2200      	movs	r2, #0
 800115e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001160:	f7ff fb6e 	bl	8000840 <HAL_GetTick>
 8001164:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	88fa      	ldrh	r2, [r7, #6]
 800116a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	88fa      	ldrh	r2, [r7, #6]
 8001172:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800117e:	d10e      	bne.n	800119e <HAL_UART_Receive+0x80>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d105      	bne.n	8001194 <HAL_UART_Receive+0x76>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800118e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8001192:	e02d      	b.n	80011f0 <HAL_UART_Receive+0xd2>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	22ff      	movs	r2, #255	@ 0xff
 8001198:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800119c:	e028      	b.n	80011f0 <HAL_UART_Receive+0xd2>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10d      	bne.n	80011c2 <HAL_UART_Receive+0xa4>
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d104      	bne.n	80011b8 <HAL_UART_Receive+0x9a>
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	22ff      	movs	r2, #255	@ 0xff
 80011b2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80011b6:	e01b      	b.n	80011f0 <HAL_UART_Receive+0xd2>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	227f      	movs	r2, #127	@ 0x7f
 80011bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80011c0:	e016      	b.n	80011f0 <HAL_UART_Receive+0xd2>
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80011ca:	d10d      	bne.n	80011e8 <HAL_UART_Receive+0xca>
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d104      	bne.n	80011de <HAL_UART_Receive+0xc0>
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	227f      	movs	r2, #127	@ 0x7f
 80011d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80011dc:	e008      	b.n	80011f0 <HAL_UART_Receive+0xd2>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	223f      	movs	r2, #63	@ 0x3f
 80011e2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80011e6:	e003      	b.n	80011f0 <HAL_UART_Receive+0xd2>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80011f6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001200:	d108      	bne.n	8001214 <HAL_UART_Receive+0xf6>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d104      	bne.n	8001214 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	61bb      	str	r3, [r7, #24]
 8001212:	e003      	b.n	800121c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800121c:	e037      	b.n	800128e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2200      	movs	r2, #0
 8001226:	2120      	movs	r1, #32
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f000 fc43 	bl	8001ab4 <UART_WaitOnFlagUntilTimeout>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2220      	movs	r2, #32
 8001238:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e033      	b.n	80012a8 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10c      	bne.n	8001260 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800124c:	b29a      	uxth	r2, r3
 800124e:	8a7b      	ldrh	r3, [r7, #18]
 8001250:	4013      	ands	r3, r2
 8001252:	b29a      	uxth	r2, r3
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	3302      	adds	r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
 800125e:	e00d      	b.n	800127c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001266:	b29b      	uxth	r3, r3
 8001268:	b2da      	uxtb	r2, r3
 800126a:	8a7b      	ldrh	r3, [r7, #18]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	4013      	ands	r3, r2
 8001270:	b2da      	uxtb	r2, r3
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3301      	adds	r3, #1
 800127a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001282:	b29b      	uxth	r3, r3
 8001284:	3b01      	subs	r3, #1
 8001286:	b29a      	uxth	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001294:	b29b      	uxth	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1c1      	bne.n	800121e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2220      	movs	r2, #32
 800129e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e000      	b.n	80012a8 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80012a6:	2302      	movs	r3, #2
  }
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3720      	adds	r7, #32
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80012b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012b4:	b08a      	sub	sp, #40	@ 0x28
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	431a      	orrs	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	431a      	orrs	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4ba4      	ldr	r3, [pc, #656]	@ (8001570 <UART_SetConfig+0x2c0>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	6812      	ldr	r2, [r2, #0]
 80012e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012e8:	430b      	orrs	r3, r1
 80012ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	68da      	ldr	r2, [r3, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	430a      	orrs	r2, r1
 8001300:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a99      	ldr	r2, [pc, #612]	@ (8001574 <UART_SetConfig+0x2c4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d004      	beq.n	800131c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001318:	4313      	orrs	r3, r2
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800132c:	430a      	orrs	r2, r1
 800132e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a90      	ldr	r2, [pc, #576]	@ (8001578 <UART_SetConfig+0x2c8>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d126      	bne.n	8001388 <UART_SetConfig+0xd8>
 800133a:	4b90      	ldr	r3, [pc, #576]	@ (800157c <UART_SetConfig+0x2cc>)
 800133c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b03      	cmp	r3, #3
 8001346:	d81b      	bhi.n	8001380 <UART_SetConfig+0xd0>
 8001348:	a201      	add	r2, pc, #4	@ (adr r2, 8001350 <UART_SetConfig+0xa0>)
 800134a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134e:	bf00      	nop
 8001350:	08001361 	.word	0x08001361
 8001354:	08001371 	.word	0x08001371
 8001358:	08001369 	.word	0x08001369
 800135c:	08001379 	.word	0x08001379
 8001360:	2301      	movs	r3, #1
 8001362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001366:	e116      	b.n	8001596 <UART_SetConfig+0x2e6>
 8001368:	2302      	movs	r3, #2
 800136a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800136e:	e112      	b.n	8001596 <UART_SetConfig+0x2e6>
 8001370:	2304      	movs	r3, #4
 8001372:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001376:	e10e      	b.n	8001596 <UART_SetConfig+0x2e6>
 8001378:	2308      	movs	r3, #8
 800137a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800137e:	e10a      	b.n	8001596 <UART_SetConfig+0x2e6>
 8001380:	2310      	movs	r3, #16
 8001382:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001386:	e106      	b.n	8001596 <UART_SetConfig+0x2e6>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a7c      	ldr	r2, [pc, #496]	@ (8001580 <UART_SetConfig+0x2d0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d138      	bne.n	8001404 <UART_SetConfig+0x154>
 8001392:	4b7a      	ldr	r3, [pc, #488]	@ (800157c <UART_SetConfig+0x2cc>)
 8001394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001398:	f003 030c 	and.w	r3, r3, #12
 800139c:	2b0c      	cmp	r3, #12
 800139e:	d82d      	bhi.n	80013fc <UART_SetConfig+0x14c>
 80013a0:	a201      	add	r2, pc, #4	@ (adr r2, 80013a8 <UART_SetConfig+0xf8>)
 80013a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a6:	bf00      	nop
 80013a8:	080013dd 	.word	0x080013dd
 80013ac:	080013fd 	.word	0x080013fd
 80013b0:	080013fd 	.word	0x080013fd
 80013b4:	080013fd 	.word	0x080013fd
 80013b8:	080013ed 	.word	0x080013ed
 80013bc:	080013fd 	.word	0x080013fd
 80013c0:	080013fd 	.word	0x080013fd
 80013c4:	080013fd 	.word	0x080013fd
 80013c8:	080013e5 	.word	0x080013e5
 80013cc:	080013fd 	.word	0x080013fd
 80013d0:	080013fd 	.word	0x080013fd
 80013d4:	080013fd 	.word	0x080013fd
 80013d8:	080013f5 	.word	0x080013f5
 80013dc:	2300      	movs	r3, #0
 80013de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80013e2:	e0d8      	b.n	8001596 <UART_SetConfig+0x2e6>
 80013e4:	2302      	movs	r3, #2
 80013e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80013ea:	e0d4      	b.n	8001596 <UART_SetConfig+0x2e6>
 80013ec:	2304      	movs	r3, #4
 80013ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80013f2:	e0d0      	b.n	8001596 <UART_SetConfig+0x2e6>
 80013f4:	2308      	movs	r3, #8
 80013f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80013fa:	e0cc      	b.n	8001596 <UART_SetConfig+0x2e6>
 80013fc:	2310      	movs	r3, #16
 80013fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001402:	e0c8      	b.n	8001596 <UART_SetConfig+0x2e6>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a5e      	ldr	r2, [pc, #376]	@ (8001584 <UART_SetConfig+0x2d4>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d125      	bne.n	800145a <UART_SetConfig+0x1aa>
 800140e:	4b5b      	ldr	r3, [pc, #364]	@ (800157c <UART_SetConfig+0x2cc>)
 8001410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001414:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001418:	2b30      	cmp	r3, #48	@ 0x30
 800141a:	d016      	beq.n	800144a <UART_SetConfig+0x19a>
 800141c:	2b30      	cmp	r3, #48	@ 0x30
 800141e:	d818      	bhi.n	8001452 <UART_SetConfig+0x1a2>
 8001420:	2b20      	cmp	r3, #32
 8001422:	d00a      	beq.n	800143a <UART_SetConfig+0x18a>
 8001424:	2b20      	cmp	r3, #32
 8001426:	d814      	bhi.n	8001452 <UART_SetConfig+0x1a2>
 8001428:	2b00      	cmp	r3, #0
 800142a:	d002      	beq.n	8001432 <UART_SetConfig+0x182>
 800142c:	2b10      	cmp	r3, #16
 800142e:	d008      	beq.n	8001442 <UART_SetConfig+0x192>
 8001430:	e00f      	b.n	8001452 <UART_SetConfig+0x1a2>
 8001432:	2300      	movs	r3, #0
 8001434:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001438:	e0ad      	b.n	8001596 <UART_SetConfig+0x2e6>
 800143a:	2302      	movs	r3, #2
 800143c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001440:	e0a9      	b.n	8001596 <UART_SetConfig+0x2e6>
 8001442:	2304      	movs	r3, #4
 8001444:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001448:	e0a5      	b.n	8001596 <UART_SetConfig+0x2e6>
 800144a:	2308      	movs	r3, #8
 800144c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001450:	e0a1      	b.n	8001596 <UART_SetConfig+0x2e6>
 8001452:	2310      	movs	r3, #16
 8001454:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001458:	e09d      	b.n	8001596 <UART_SetConfig+0x2e6>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a4a      	ldr	r2, [pc, #296]	@ (8001588 <UART_SetConfig+0x2d8>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d125      	bne.n	80014b0 <UART_SetConfig+0x200>
 8001464:	4b45      	ldr	r3, [pc, #276]	@ (800157c <UART_SetConfig+0x2cc>)
 8001466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800146a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800146e:	2bc0      	cmp	r3, #192	@ 0xc0
 8001470:	d016      	beq.n	80014a0 <UART_SetConfig+0x1f0>
 8001472:	2bc0      	cmp	r3, #192	@ 0xc0
 8001474:	d818      	bhi.n	80014a8 <UART_SetConfig+0x1f8>
 8001476:	2b80      	cmp	r3, #128	@ 0x80
 8001478:	d00a      	beq.n	8001490 <UART_SetConfig+0x1e0>
 800147a:	2b80      	cmp	r3, #128	@ 0x80
 800147c:	d814      	bhi.n	80014a8 <UART_SetConfig+0x1f8>
 800147e:	2b00      	cmp	r3, #0
 8001480:	d002      	beq.n	8001488 <UART_SetConfig+0x1d8>
 8001482:	2b40      	cmp	r3, #64	@ 0x40
 8001484:	d008      	beq.n	8001498 <UART_SetConfig+0x1e8>
 8001486:	e00f      	b.n	80014a8 <UART_SetConfig+0x1f8>
 8001488:	2300      	movs	r3, #0
 800148a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800148e:	e082      	b.n	8001596 <UART_SetConfig+0x2e6>
 8001490:	2302      	movs	r3, #2
 8001492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001496:	e07e      	b.n	8001596 <UART_SetConfig+0x2e6>
 8001498:	2304      	movs	r3, #4
 800149a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800149e:	e07a      	b.n	8001596 <UART_SetConfig+0x2e6>
 80014a0:	2308      	movs	r3, #8
 80014a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80014a6:	e076      	b.n	8001596 <UART_SetConfig+0x2e6>
 80014a8:	2310      	movs	r3, #16
 80014aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80014ae:	e072      	b.n	8001596 <UART_SetConfig+0x2e6>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a35      	ldr	r2, [pc, #212]	@ (800158c <UART_SetConfig+0x2dc>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d12a      	bne.n	8001510 <UART_SetConfig+0x260>
 80014ba:	4b30      	ldr	r3, [pc, #192]	@ (800157c <UART_SetConfig+0x2cc>)
 80014bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80014c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80014c8:	d01a      	beq.n	8001500 <UART_SetConfig+0x250>
 80014ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80014ce:	d81b      	bhi.n	8001508 <UART_SetConfig+0x258>
 80014d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014d4:	d00c      	beq.n	80014f0 <UART_SetConfig+0x240>
 80014d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014da:	d815      	bhi.n	8001508 <UART_SetConfig+0x258>
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <UART_SetConfig+0x238>
 80014e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014e4:	d008      	beq.n	80014f8 <UART_SetConfig+0x248>
 80014e6:	e00f      	b.n	8001508 <UART_SetConfig+0x258>
 80014e8:	2300      	movs	r3, #0
 80014ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80014ee:	e052      	b.n	8001596 <UART_SetConfig+0x2e6>
 80014f0:	2302      	movs	r3, #2
 80014f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80014f6:	e04e      	b.n	8001596 <UART_SetConfig+0x2e6>
 80014f8:	2304      	movs	r3, #4
 80014fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80014fe:	e04a      	b.n	8001596 <UART_SetConfig+0x2e6>
 8001500:	2308      	movs	r3, #8
 8001502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001506:	e046      	b.n	8001596 <UART_SetConfig+0x2e6>
 8001508:	2310      	movs	r3, #16
 800150a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800150e:	e042      	b.n	8001596 <UART_SetConfig+0x2e6>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a17      	ldr	r2, [pc, #92]	@ (8001574 <UART_SetConfig+0x2c4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d13a      	bne.n	8001590 <UART_SetConfig+0x2e0>
 800151a:	4b18      	ldr	r3, [pc, #96]	@ (800157c <UART_SetConfig+0x2cc>)
 800151c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001520:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001524:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001528:	d01a      	beq.n	8001560 <UART_SetConfig+0x2b0>
 800152a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800152e:	d81b      	bhi.n	8001568 <UART_SetConfig+0x2b8>
 8001530:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001534:	d00c      	beq.n	8001550 <UART_SetConfig+0x2a0>
 8001536:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800153a:	d815      	bhi.n	8001568 <UART_SetConfig+0x2b8>
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <UART_SetConfig+0x298>
 8001540:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001544:	d008      	beq.n	8001558 <UART_SetConfig+0x2a8>
 8001546:	e00f      	b.n	8001568 <UART_SetConfig+0x2b8>
 8001548:	2300      	movs	r3, #0
 800154a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800154e:	e022      	b.n	8001596 <UART_SetConfig+0x2e6>
 8001550:	2302      	movs	r3, #2
 8001552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001556:	e01e      	b.n	8001596 <UART_SetConfig+0x2e6>
 8001558:	2304      	movs	r3, #4
 800155a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800155e:	e01a      	b.n	8001596 <UART_SetConfig+0x2e6>
 8001560:	2308      	movs	r3, #8
 8001562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001566:	e016      	b.n	8001596 <UART_SetConfig+0x2e6>
 8001568:	2310      	movs	r3, #16
 800156a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800156e:	e012      	b.n	8001596 <UART_SetConfig+0x2e6>
 8001570:	efff69f3 	.word	0xefff69f3
 8001574:	40008000 	.word	0x40008000
 8001578:	40013800 	.word	0x40013800
 800157c:	40021000 	.word	0x40021000
 8001580:	40004400 	.word	0x40004400
 8001584:	40004800 	.word	0x40004800
 8001588:	40004c00 	.word	0x40004c00
 800158c:	40005000 	.word	0x40005000
 8001590:	2310      	movs	r3, #16
 8001592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a9f      	ldr	r2, [pc, #636]	@ (8001818 <UART_SetConfig+0x568>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d17a      	bne.n	8001696 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80015a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d824      	bhi.n	80015f2 <UART_SetConfig+0x342>
 80015a8:	a201      	add	r2, pc, #4	@ (adr r2, 80015b0 <UART_SetConfig+0x300>)
 80015aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ae:	bf00      	nop
 80015b0:	080015d5 	.word	0x080015d5
 80015b4:	080015f3 	.word	0x080015f3
 80015b8:	080015dd 	.word	0x080015dd
 80015bc:	080015f3 	.word	0x080015f3
 80015c0:	080015e3 	.word	0x080015e3
 80015c4:	080015f3 	.word	0x080015f3
 80015c8:	080015f3 	.word	0x080015f3
 80015cc:	080015f3 	.word	0x080015f3
 80015d0:	080015eb 	.word	0x080015eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80015d4:	f7ff fca0 	bl	8000f18 <HAL_RCC_GetPCLK1Freq>
 80015d8:	61f8      	str	r0, [r7, #28]
        break;
 80015da:	e010      	b.n	80015fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80015dc:	4b8f      	ldr	r3, [pc, #572]	@ (800181c <UART_SetConfig+0x56c>)
 80015de:	61fb      	str	r3, [r7, #28]
        break;
 80015e0:	e00d      	b.n	80015fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80015e2:	f7ff fc01 	bl	8000de8 <HAL_RCC_GetSysClockFreq>
 80015e6:	61f8      	str	r0, [r7, #28]
        break;
 80015e8:	e009      	b.n	80015fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80015ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015ee:	61fb      	str	r3, [r7, #28]
        break;
 80015f0:	e005      	b.n	80015fe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80015fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 80fb 	beq.w	80017fc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	69fa      	ldr	r2, [r7, #28]
 8001612:	429a      	cmp	r2, r3
 8001614:	d305      	bcc.n	8001622 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	429a      	cmp	r2, r3
 8001620:	d903      	bls.n	800162a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001628:	e0e8      	b.n	80017fc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	2200      	movs	r2, #0
 800162e:	461c      	mov	r4, r3
 8001630:	4615      	mov	r5, r2
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	f04f 0300 	mov.w	r3, #0
 800163a:	022b      	lsls	r3, r5, #8
 800163c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8001640:	0222      	lsls	r2, r4, #8
 8001642:	68f9      	ldr	r1, [r7, #12]
 8001644:	6849      	ldr	r1, [r1, #4]
 8001646:	0849      	lsrs	r1, r1, #1
 8001648:	2000      	movs	r0, #0
 800164a:	4688      	mov	r8, r1
 800164c:	4681      	mov	r9, r0
 800164e:	eb12 0a08 	adds.w	sl, r2, r8
 8001652:	eb43 0b09 	adc.w	fp, r3, r9
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	603b      	str	r3, [r7, #0]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001664:	4650      	mov	r0, sl
 8001666:	4659      	mov	r1, fp
 8001668:	f7fe fdb6 	bl	80001d8 <__aeabi_uldivmod>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4613      	mov	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800167a:	d308      	bcc.n	800168e <UART_SetConfig+0x3de>
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001682:	d204      	bcs.n	800168e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	e0b6      	b.n	80017fc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001694:	e0b2      	b.n	80017fc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800169e:	d15e      	bne.n	800175e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80016a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	d828      	bhi.n	80016fa <UART_SetConfig+0x44a>
 80016a8:	a201      	add	r2, pc, #4	@ (adr r2, 80016b0 <UART_SetConfig+0x400>)
 80016aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ae:	bf00      	nop
 80016b0:	080016d5 	.word	0x080016d5
 80016b4:	080016dd 	.word	0x080016dd
 80016b8:	080016e5 	.word	0x080016e5
 80016bc:	080016fb 	.word	0x080016fb
 80016c0:	080016eb 	.word	0x080016eb
 80016c4:	080016fb 	.word	0x080016fb
 80016c8:	080016fb 	.word	0x080016fb
 80016cc:	080016fb 	.word	0x080016fb
 80016d0:	080016f3 	.word	0x080016f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80016d4:	f7ff fc20 	bl	8000f18 <HAL_RCC_GetPCLK1Freq>
 80016d8:	61f8      	str	r0, [r7, #28]
        break;
 80016da:	e014      	b.n	8001706 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80016dc:	f7ff fc32 	bl	8000f44 <HAL_RCC_GetPCLK2Freq>
 80016e0:	61f8      	str	r0, [r7, #28]
        break;
 80016e2:	e010      	b.n	8001706 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80016e4:	4b4d      	ldr	r3, [pc, #308]	@ (800181c <UART_SetConfig+0x56c>)
 80016e6:	61fb      	str	r3, [r7, #28]
        break;
 80016e8:	e00d      	b.n	8001706 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80016ea:	f7ff fb7d 	bl	8000de8 <HAL_RCC_GetSysClockFreq>
 80016ee:	61f8      	str	r0, [r7, #28]
        break;
 80016f0:	e009      	b.n	8001706 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80016f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016f6:	61fb      	str	r3, [r7, #28]
        break;
 80016f8:	e005      	b.n	8001706 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8001704:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d077      	beq.n	80017fc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	005a      	lsls	r2, r3, #1
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	085b      	lsrs	r3, r3, #1
 8001716:	441a      	add	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001720:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d916      	bls.n	8001756 <UART_SetConfig+0x4a6>
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800172e:	d212      	bcs.n	8001756 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	b29b      	uxth	r3, r3
 8001734:	f023 030f 	bic.w	r3, r3, #15
 8001738:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	085b      	lsrs	r3, r3, #1
 800173e:	b29b      	uxth	r3, r3
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	b29a      	uxth	r2, r3
 8001746:	8afb      	ldrh	r3, [r7, #22]
 8001748:	4313      	orrs	r3, r2
 800174a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	8afa      	ldrh	r2, [r7, #22]
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	e052      	b.n	80017fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800175c:	e04e      	b.n	80017fc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800175e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001762:	2b08      	cmp	r3, #8
 8001764:	d827      	bhi.n	80017b6 <UART_SetConfig+0x506>
 8001766:	a201      	add	r2, pc, #4	@ (adr r2, 800176c <UART_SetConfig+0x4bc>)
 8001768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176c:	08001791 	.word	0x08001791
 8001770:	08001799 	.word	0x08001799
 8001774:	080017a1 	.word	0x080017a1
 8001778:	080017b7 	.word	0x080017b7
 800177c:	080017a7 	.word	0x080017a7
 8001780:	080017b7 	.word	0x080017b7
 8001784:	080017b7 	.word	0x080017b7
 8001788:	080017b7 	.word	0x080017b7
 800178c:	080017af 	.word	0x080017af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001790:	f7ff fbc2 	bl	8000f18 <HAL_RCC_GetPCLK1Freq>
 8001794:	61f8      	str	r0, [r7, #28]
        break;
 8001796:	e014      	b.n	80017c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001798:	f7ff fbd4 	bl	8000f44 <HAL_RCC_GetPCLK2Freq>
 800179c:	61f8      	str	r0, [r7, #28]
        break;
 800179e:	e010      	b.n	80017c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80017a0:	4b1e      	ldr	r3, [pc, #120]	@ (800181c <UART_SetConfig+0x56c>)
 80017a2:	61fb      	str	r3, [r7, #28]
        break;
 80017a4:	e00d      	b.n	80017c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80017a6:	f7ff fb1f 	bl	8000de8 <HAL_RCC_GetSysClockFreq>
 80017aa:	61f8      	str	r0, [r7, #28]
        break;
 80017ac:	e009      	b.n	80017c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80017ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017b2:	61fb      	str	r3, [r7, #28]
        break;
 80017b4:	e005      	b.n	80017c2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80017c0:	bf00      	nop
    }

    if (pclk != 0U)
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d019      	beq.n	80017fc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	085a      	lsrs	r2, r3, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	441a      	add	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2b0f      	cmp	r3, #15
 80017e0:	d909      	bls.n	80017f6 <UART_SetConfig+0x546>
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017e8:	d205      	bcs.n	80017f6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	e002      	b.n	80017fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8001808:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800180c:	4618      	mov	r0, r3
 800180e:	3728      	adds	r7, #40	@ 0x28
 8001810:	46bd      	mov	sp, r7
 8001812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001816:	bf00      	nop
 8001818:	40008000 	.word	0x40008000
 800181c:	00f42400 	.word	0x00f42400

08001820 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00a      	beq.n	800184a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00a      	beq.n	800186c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00a      	beq.n	800188e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00a      	beq.n	80018b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b4:	f003 0310 	and.w	r3, r3, #16
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00a      	beq.n	80018d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d6:	f003 0320 	and.w	r3, r3, #32
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00a      	beq.n	80018f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01a      	beq.n	8001936 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800191e:	d10a      	bne.n	8001936 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00a      	beq.n	8001958 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	605a      	str	r2, [r3, #4]
  }
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b098      	sub	sp, #96	@ 0x60
 8001968:	af02      	add	r7, sp, #8
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001974:	f7fe ff64 	bl	8000840 <HAL_GetTick>
 8001978:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b08      	cmp	r3, #8
 8001986:	d12e      	bne.n	80019e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001988:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001990:	2200      	movs	r2, #0
 8001992:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f88c 	bl	8001ab4 <UART_WaitOnFlagUntilTimeout>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d021      	beq.n	80019e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019aa:	e853 3f00 	ldrex	r3, [r3]
 80019ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80019b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80019b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80019c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80019c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80019c8:	e841 2300 	strex	r3, r2, [r1]
 80019cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80019ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1e6      	bne.n	80019a2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2220      	movs	r2, #32
 80019d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e062      	b.n	8001aac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d149      	bne.n	8001a88 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80019f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019fc:	2200      	movs	r2, #0
 80019fe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f856 	bl	8001ab4 <UART_WaitOnFlagUntilTimeout>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d03c      	beq.n	8001a88 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a16:	e853 3f00 	ldrex	r3, [r3]
 8001a1a:	623b      	str	r3, [r7, #32]
   return(result);
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001a32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a34:	e841 2300 	strex	r3, r2, [r1]
 8001a38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1e6      	bne.n	8001a0e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	3308      	adds	r3, #8
 8001a46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	e853 3f00 	ldrex	r3, [r3]
 8001a4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f023 0301 	bic.w	r3, r3, #1
 8001a56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	3308      	adds	r3, #8
 8001a5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001a60:	61fa      	str	r2, [r7, #28]
 8001a62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a64:	69b9      	ldr	r1, [r7, #24]
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	e841 2300 	strex	r3, r2, [r1]
 8001a6c:	617b      	str	r3, [r7, #20]
   return(result);
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1e5      	bne.n	8001a40 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2220      	movs	r2, #32
 8001a78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e011      	b.n	8001aac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2220      	movs	r2, #32
 8001a92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3758      	adds	r7, #88	@ 0x58
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ac4:	e04f      	b.n	8001b66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001acc:	d04b      	beq.n	8001b66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ace:	f7fe feb7 	bl	8000840 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d302      	bcc.n	8001ae4 <UART_WaitOnFlagUntilTimeout+0x30>
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e04e      	b.n	8001b86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d037      	beq.n	8001b66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	2b80      	cmp	r3, #128	@ 0x80
 8001afa:	d034      	beq.n	8001b66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b40      	cmp	r3, #64	@ 0x40
 8001b00:	d031      	beq.n	8001b66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d110      	bne.n	8001b32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2208      	movs	r2, #8
 8001b16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 f838 	bl	8001b8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2208      	movs	r2, #8
 8001b22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e029      	b.n	8001b86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b40:	d111      	bne.n	8001b66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 f81e 	bl	8001b8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2220      	movs	r2, #32
 8001b56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e00f      	b.n	8001b86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	69da      	ldr	r2, [r3, #28]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	bf0c      	ite	eq
 8001b76:	2301      	moveq	r3, #1
 8001b78:	2300      	movne	r3, #0
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d0a0      	beq.n	8001ac6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b095      	sub	sp, #84	@ 0x54
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b9e:	e853 3f00 	ldrex	r3, [r3]
 8001ba2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ba6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8001bb6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001bba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001bbc:	e841 2300 	strex	r3, r2, [r1]
 8001bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1e6      	bne.n	8001b96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	3308      	adds	r3, #8
 8001bce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	e853 3f00 	ldrex	r3, [r3]
 8001bd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f023 0301 	bic.w	r3, r3, #1
 8001bde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	3308      	adds	r3, #8
 8001be6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001be8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bf0:	e841 2300 	strex	r3, r2, [r1]
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1e5      	bne.n	8001bc8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d118      	bne.n	8001c36 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	e853 3f00 	ldrex	r3, [r3]
 8001c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f023 0310 	bic.w	r3, r3, #16
 8001c18:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c22:	61bb      	str	r3, [r7, #24]
 8001c24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c26:	6979      	ldr	r1, [r7, #20]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	e841 2300 	strex	r3, r2, [r1]
 8001c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1e6      	bne.n	8001c04 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2220      	movs	r2, #32
 8001c3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8001c4a:	bf00      	nop
 8001c4c:	3754      	adds	r7, #84	@ 0x54
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <__libc_init_array>:
 8001c58:	b570      	push	{r4, r5, r6, lr}
 8001c5a:	4d0d      	ldr	r5, [pc, #52]	@ (8001c90 <__libc_init_array+0x38>)
 8001c5c:	4c0d      	ldr	r4, [pc, #52]	@ (8001c94 <__libc_init_array+0x3c>)
 8001c5e:	1b64      	subs	r4, r4, r5
 8001c60:	10a4      	asrs	r4, r4, #2
 8001c62:	2600      	movs	r6, #0
 8001c64:	42a6      	cmp	r6, r4
 8001c66:	d109      	bne.n	8001c7c <__libc_init_array+0x24>
 8001c68:	4d0b      	ldr	r5, [pc, #44]	@ (8001c98 <__libc_init_array+0x40>)
 8001c6a:	4c0c      	ldr	r4, [pc, #48]	@ (8001c9c <__libc_init_array+0x44>)
 8001c6c:	f000 f818 	bl	8001ca0 <_init>
 8001c70:	1b64      	subs	r4, r4, r5
 8001c72:	10a4      	asrs	r4, r4, #2
 8001c74:	2600      	movs	r6, #0
 8001c76:	42a6      	cmp	r6, r4
 8001c78:	d105      	bne.n	8001c86 <__libc_init_array+0x2e>
 8001c7a:	bd70      	pop	{r4, r5, r6, pc}
 8001c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c80:	4798      	blx	r3
 8001c82:	3601      	adds	r6, #1
 8001c84:	e7ee      	b.n	8001c64 <__libc_init_array+0xc>
 8001c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c8a:	4798      	blx	r3
 8001c8c:	3601      	adds	r6, #1
 8001c8e:	e7f2      	b.n	8001c76 <__libc_init_array+0x1e>
 8001c90:	08001d18 	.word	0x08001d18
 8001c94:	08001d18 	.word	0x08001d18
 8001c98:	08001d18 	.word	0x08001d18
 8001c9c:	08001d1c 	.word	0x08001d1c

08001ca0 <_init>:
 8001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca2:	bf00      	nop
 8001ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ca6:	bc08      	pop	{r3}
 8001ca8:	469e      	mov	lr, r3
 8001caa:	4770      	bx	lr

08001cac <_fini>:
 8001cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cae:	bf00      	nop
 8001cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cb2:	bc08      	pop	{r3}
 8001cb4:	469e      	mov	lr, r3
 8001cb6:	4770      	bx	lr
