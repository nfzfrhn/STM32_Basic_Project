
01_UART_IT_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002718  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080028a0  080028a0  000038a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028f8  080028f8  00004010  2**0
                  CONTENTS
  4 .ARM          00000008  080028f8  080028f8  000038f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002900  08002900  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002900  08002900  00003900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002904  08002904  00003904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002908  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000010  08002918  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08002918  00004128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0c7  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017bb  00000000  00000000  0000e107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0000f8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000059b  00000000  00000000  00010018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025442  00000000  00000000  000105b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f2b  00000000  00000000  000359f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6532  00000000  00000000  0003f920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125e52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d30  00000000  00000000  00125e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00127bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002888 	.word	0x08002888

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002888 	.word	0x08002888

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <SysTick_Handler>:
#include "main.h"

extern UART_HandleTypeDef huart2;

void SysTick_Handler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80004cc:	f000 f9a2 	bl	8000814 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80004d0:	f000 fad1 	bl	8000a76 <HAL_SYSTICK_IRQHandler>
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 80004dc:	4802      	ldr	r0, [pc, #8]	@ (80004e8 <USART2_IRQHandler+0x10>)
 80004de:	f000 fee9 	bl	80012b4 <HAL_UART_IRQHandler>
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	2000002c 	.word	0x2000002c

080004ec <main>:
uint8_t rcvd_data;
uint8_t data_buffer[100];
uint8_t reception_complete;

int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
	HAL_Init();
 80004f2:	f000 f933 	bl	800075c <HAL_Init>
	SystemClockConfig();
 80004f6:	f000 f82b 	bl	8000550 <SystemClockConfig>
	UART2_Init();
 80004fa:	f000 f831 	bl	8000560 <UART2_Init>

	uint16_t len_data = strlen(user_data);
 80004fe:	4b10      	ldr	r3, [pc, #64]	@ (8000540 <main+0x54>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff fe60 	bl	80001c8 <strlen>
 8000508:	4603      	mov	r3, r0
 800050a:	80fb      	strh	r3, [r7, #6]
	if(HAL_UART_Transmit(&huart2, (uint8_t*) user_data, len_data, HAL_MAX_DELAY) != HAL_OK)
 800050c:	4b0c      	ldr	r3, [pc, #48]	@ (8000540 <main+0x54>)
 800050e:	6819      	ldr	r1, [r3, #0]
 8000510:	88fa      	ldrh	r2, [r7, #6]
 8000512:	f04f 33ff 	mov.w	r3, #4294967295
 8000516:	480b      	ldr	r0, [pc, #44]	@ (8000544 <main+0x58>)
 8000518:	f000 fdf6 	bl	8001108 <HAL_UART_Transmit>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d007      	beq.n	8000532 <main+0x46>
	{
		Error_Handler();
 8000522:	f000 f843 	bl	80005ac <Error_Handler>
	}


	while(reception_complete != TRUE){
 8000526:	e004      	b.n	8000532 <main+0x46>
		HAL_UART_Receive_IT(&huart2, &rcvd_data, 1);
 8000528:	2201      	movs	r2, #1
 800052a:	4907      	ldr	r1, [pc, #28]	@ (8000548 <main+0x5c>)
 800052c:	4805      	ldr	r0, [pc, #20]	@ (8000544 <main+0x58>)
 800052e:	f000 fe75 	bl	800121c <HAL_UART_Receive_IT>
	while(reception_complete != TRUE){
 8000532:	4b06      	ldr	r3, [pc, #24]	@ (800054c <main+0x60>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d1f6      	bne.n	8000528 <main+0x3c>
	}


	while(1);
 800053a:	bf00      	nop
 800053c:	e7fd      	b.n	800053a <main+0x4e>
 800053e:	bf00      	nop
 8000540:	20000000 	.word	0x20000000
 8000544:	2000002c 	.word	0x2000002c
 8000548:	200000b8 	.word	0x200000b8
 800054c:	20000120 	.word	0x20000120

08000550 <SystemClockConfig>:
}


//You only use when you need special clock setting
void SystemClockConfig(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
	...

08000560 <UART2_Init>:

// High level initialisation of peripheral
void UART2_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000564:	4b0f      	ldr	r3, [pc, #60]	@ (80005a4 <UART2_Init+0x44>)
 8000566:	4a10      	ldr	r2, [pc, #64]	@ (80005a8 <UART2_Init+0x48>)
 8000568:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800056a:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <UART2_Init+0x44>)
 800056c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000570:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000572:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <UART2_Init+0x44>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000578:	4b0a      	ldr	r3, [pc, #40]	@ (80005a4 <UART2_Init+0x44>)
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800057e:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <UART2_Init+0x44>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000584:	4b07      	ldr	r3, [pc, #28]	@ (80005a4 <UART2_Init+0x44>)
 8000586:	2200      	movs	r2, #0
 8000588:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800058a:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <UART2_Init+0x44>)
 800058c:	220c      	movs	r2, #12
 800058e:	615a      	str	r2, [r3, #20]
	if(HAL_UART_Init(&huart2) != HAL_OK){
 8000590:	4804      	ldr	r0, [pc, #16]	@ (80005a4 <UART2_Init+0x44>)
 8000592:	f000 fd6b 	bl	800106c <HAL_UART_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <UART2_Init+0x40>
		//There is a problem
		Error_Handler();
 800059c:	f000 f806 	bl	80005ac <Error_Handler>
	}
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	2000002c 	.word	0x2000002c
 80005a8:	40004400 	.word	0x40004400

080005ac <Error_Handler>:

	return data;
}


void Error_Handler(){
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
	while(1){
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <Error_Handler+0x4>

080005b4 <HAL_UART_RxCpltCallback>:
}


//Receive Callback Function when UART Receive a complete data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	if(rcvd_data == '\r')
 80005bc:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <HAL_UART_RxCpltCallback+0x54>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b0d      	cmp	r3, #13
 80005c2:	d114      	bne.n	80005ee <HAL_UART_RxCpltCallback+0x3a>
	{
		reception_complete = TRUE;
 80005c4:	4b11      	ldr	r3, [pc, #68]	@ (800060c <HAL_UART_RxCpltCallback+0x58>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]
		data_buffer[count++] = '\r';
 80005ca:	4b11      	ldr	r3, [pc, #68]	@ (8000610 <HAL_UART_RxCpltCallback+0x5c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	490f      	ldr	r1, [pc, #60]	@ (8000610 <HAL_UART_RxCpltCallback+0x5c>)
 80005d2:	600a      	str	r2, [r1, #0]
 80005d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000614 <HAL_UART_RxCpltCallback+0x60>)
 80005d6:	210d      	movs	r1, #13
 80005d8:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(&huart2, data_buffer, count, HAL_MAX_DELAY);
 80005da:	4b0d      	ldr	r3, [pc, #52]	@ (8000610 <HAL_UART_RxCpltCallback+0x5c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	b29a      	uxth	r2, r3
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295
 80005e4:	490b      	ldr	r1, [pc, #44]	@ (8000614 <HAL_UART_RxCpltCallback+0x60>)
 80005e6:	480c      	ldr	r0, [pc, #48]	@ (8000618 <HAL_UART_RxCpltCallback+0x64>)
 80005e8:	f000 fd8e 	bl	8001108 <HAL_UART_Transmit>
	}
	else{
		data_buffer[count++] = rcvd_data;
	}

}
 80005ec:	e008      	b.n	8000600 <HAL_UART_RxCpltCallback+0x4c>
		data_buffer[count++] = rcvd_data;
 80005ee:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <HAL_UART_RxCpltCallback+0x5c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	1c5a      	adds	r2, r3, #1
 80005f4:	4906      	ldr	r1, [pc, #24]	@ (8000610 <HAL_UART_RxCpltCallback+0x5c>)
 80005f6:	600a      	str	r2, [r1, #0]
 80005f8:	4a03      	ldr	r2, [pc, #12]	@ (8000608 <HAL_UART_RxCpltCallback+0x54>)
 80005fa:	7811      	ldrb	r1, [r2, #0]
 80005fc:	4a05      	ldr	r2, [pc, #20]	@ (8000614 <HAL_UART_RxCpltCallback+0x60>)
 80005fe:	54d1      	strb	r1, [r2, r3]
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200000b8 	.word	0x200000b8
 800060c:	20000120 	.word	0x20000120
 8000610:	200000b4 	.word	0x200000b4
 8000614:	200000bc 	.word	0x200000bc
 8000618:	2000002c 	.word	0x2000002c

0800061c <HAL_MspInit>:

#include "main.h"


void HAL_MspInit(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
	//Here we will do low level processor specific inits
	//1. Setup the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000620:	2003      	movs	r0, #3
 8000622:	f000 f9e7 	bl	80009f4 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	//Bit 18: USGFAULTENA = Usage fault system exception
	//Bit 17: BUSFAULTENA = Bus fault system exception
	//Bit 16: MEMFAULTENA = Memory fault system exception
	SCB->SHCSR = 0x7 << 16;
 8000626:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <HAL_MspInit+0x3c>)
 8000628:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800062c:	625a      	str	r2, [r3, #36]	@ 0x24

	//3. Configure the priority for the system exceptions
	// Lower number mean higher priority
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2100      	movs	r1, #0
 8000632:	f06f 000b 	mvn.w	r0, #11
 8000636:	f000 f9e8 	bl	8000a0a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2100      	movs	r1, #0
 800063e:	f06f 000a 	mvn.w	r0, #10
 8000642:	f000 f9e2 	bl	8000a0a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2100      	movs	r1, #0
 800064a:	f06f 0009 	mvn.w	r0, #9
 800064e:	f000 f9dc 	bl	8000a0a <HAL_NVIC_SetPriority>
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <HAL_UART_MspInit>:

//When the peripheral is not working as expected, then this function should be the first debug spot
//Most people do mistakes in configuring the low level peripheral settings
//Low level initialization of peripheral
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	@ 0x28
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
	//We are going to do the low level initialization of the UART2 peripheral

	//1. Enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 8000664:	4b1e      	ldr	r3, [pc, #120]	@ (80006e0 <HAL_UART_MspInit+0x84>)
 8000666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000668:	4a1d      	ldr	r2, [pc, #116]	@ (80006e0 <HAL_UART_MspInit+0x84>)
 800066a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800066e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000670:	4b1b      	ldr	r3, [pc, #108]	@ (80006e0 <HAL_UART_MspInit+0x84>)
 8000672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000678:	613b      	str	r3, [r7, #16]
 800067a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800067c:	4b18      	ldr	r3, [pc, #96]	@ (80006e0 <HAL_UART_MspInit+0x84>)
 800067e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000680:	4a17      	ldr	r2, [pc, #92]	@ (80006e0 <HAL_UART_MspInit+0x84>)
 8000682:	f043 0301 	orr.w	r3, r3, #1
 8000686:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000688:	4b15      	ldr	r3, [pc, #84]	@ (80006e0 <HAL_UART_MspInit+0x84>)
 800068a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068c:	f003 0301 	and.w	r3, r3, #1
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]

	//2. Do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2;				//UART2 Tx
 8000694:	2304      	movs	r3, #4
 8000696:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000698:	2302      	movs	r3, #2
 800069a:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 800069c:	2301      	movs	r3, #1
 800069e:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;
 80006a4:	2307      	movs	r3, #7
 80006a6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b2:	f000 fa6d 	bl	8000b90 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3;				//UART2 Rx
 80006b6:	2308      	movs	r3, #8
 80006b8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c4:	f000 fa64 	bl	8000b90 <HAL_GPIO_Init>

	//3. Enable the IRQ and setup the priority (NVIC settings)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006c8:	2026      	movs	r0, #38	@ 0x26
 80006ca:	f000 f9ba 	bl	8000a42 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	210f      	movs	r1, #15
 80006d2:	2026      	movs	r0, #38	@ 0x26
 80006d4:	f000 f999 	bl	8000a0a <HAL_NVIC_SetPriority>
}
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	@ 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40021000 	.word	0x40021000

080006e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <SystemInit+0x20>)
 80006ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006ee:	4a05      	ldr	r2, [pc, #20]	@ (8000704 <SystemInit+0x20>)
 80006f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000708:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000740 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800070c:	f7ff ffea 	bl	80006e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000710:	480c      	ldr	r0, [pc, #48]	@ (8000744 <LoopForever+0x6>)
  ldr r1, =_edata
 8000712:	490d      	ldr	r1, [pc, #52]	@ (8000748 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000714:	4a0d      	ldr	r2, [pc, #52]	@ (800074c <LoopForever+0xe>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000718:	e002      	b.n	8000720 <LoopCopyDataInit>

0800071a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800071c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071e:	3304      	adds	r3, #4

08000720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000724:	d3f9      	bcc.n	800071a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000726:	4a0a      	ldr	r2, [pc, #40]	@ (8000750 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000728:	4c0a      	ldr	r4, [pc, #40]	@ (8000754 <LoopForever+0x16>)
  movs r3, #0
 800072a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800072c:	e001      	b.n	8000732 <LoopFillZerobss>

0800072e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000730:	3204      	adds	r2, #4

08000732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000734:	d3fb      	bcc.n	800072e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000736:	f002 f883 	bl	8002840 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800073a:	f7ff fed7 	bl	80004ec <main>

0800073e <LoopForever>:

LoopForever:
    b LoopForever
 800073e:	e7fe      	b.n	800073e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000740:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000748:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800074c:	08002908 	.word	0x08002908
  ldr r2, =_sbss
 8000750:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000754:	20000128 	.word	0x20000128

08000758 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000758:	e7fe      	b.n	8000758 <ADC1_2_IRQHandler>
	...

0800075c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000762:	2300      	movs	r3, #0
 8000764:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000766:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <HAL_Init+0x3c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a0b      	ldr	r2, [pc, #44]	@ (8000798 <HAL_Init+0x3c>)
 800076c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000770:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000772:	2003      	movs	r0, #3
 8000774:	f000 f93e 	bl	80009f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000778:	2000      	movs	r0, #0
 800077a:	f000 f80f 	bl	800079c <HAL_InitTick>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000784:	2301      	movs	r3, #1
 8000786:	71fb      	strb	r3, [r7, #7]
 8000788:	e001      	b.n	800078e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800078a:	f7ff ff47 	bl	800061c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800078e:	79fb      	ldrb	r3, [r7, #7]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40022000 	.word	0x40022000

0800079c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007a4:	2300      	movs	r3, #0
 80007a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80007a8:	4b17      	ldr	r3, [pc, #92]	@ (8000808 <HAL_InitTick+0x6c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d023      	beq.n	80007f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80007b0:	4b16      	ldr	r3, [pc, #88]	@ (800080c <HAL_InitTick+0x70>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <HAL_InitTick+0x6c>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4619      	mov	r1, r3
 80007ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007be:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f949 	bl	8000a5e <HAL_SYSTICK_Config>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d10f      	bne.n	80007f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b0f      	cmp	r3, #15
 80007d6:	d809      	bhi.n	80007ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d8:	2200      	movs	r2, #0
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	f04f 30ff 	mov.w	r0, #4294967295
 80007e0:	f000 f913 	bl	8000a0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000810 <HAL_InitTick+0x74>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6013      	str	r3, [r2, #0]
 80007ea:	e007      	b.n	80007fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007ec:	2301      	movs	r3, #1
 80007ee:	73fb      	strb	r3, [r7, #15]
 80007f0:	e004      	b.n	80007fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	73fb      	strb	r3, [r7, #15]
 80007f6:	e001      	b.n	80007fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007f8:	2301      	movs	r3, #1
 80007fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000000c 	.word	0x2000000c
 800080c:	20000004 	.word	0x20000004
 8000810:	20000008 	.word	0x20000008

08000814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <HAL_IncTick+0x20>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <HAL_IncTick+0x24>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4413      	add	r3, r2
 8000824:	4a04      	ldr	r2, [pc, #16]	@ (8000838 <HAL_IncTick+0x24>)
 8000826:	6013      	str	r3, [r2, #0]
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	2000000c 	.word	0x2000000c
 8000838:	20000124 	.word	0x20000124

0800083c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  return uwTick;
 8000840:	4b03      	ldr	r3, [pc, #12]	@ (8000850 <HAL_GetTick+0x14>)
 8000842:	681b      	ldr	r3, [r3, #0]
}
 8000844:	4618      	mov	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	20000124 	.word	0x20000124

08000854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <__NVIC_SetPriorityGrouping+0x44>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000870:	4013      	ands	r3, r2
 8000872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800087c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000886:	4a04      	ldr	r2, [pc, #16]	@ (8000898 <__NVIC_SetPriorityGrouping+0x44>)
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	60d3      	str	r3, [r2, #12]
}
 800088c:	bf00      	nop
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a0:	4b04      	ldr	r3, [pc, #16]	@ (80008b4 <__NVIC_GetPriorityGrouping+0x18>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	f003 0307 	and.w	r3, r3, #7
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	db0b      	blt.n	80008e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	f003 021f 	and.w	r2, r3, #31
 80008d0:	4907      	ldr	r1, [pc, #28]	@ (80008f0 <__NVIC_EnableIRQ+0x38>)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	095b      	lsrs	r3, r3, #5
 80008d8:	2001      	movs	r0, #1
 80008da:	fa00 f202 	lsl.w	r2, r0, r2
 80008de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000e100 	.word	0xe000e100

080008f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	6039      	str	r1, [r7, #0]
 80008fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000904:	2b00      	cmp	r3, #0
 8000906:	db0a      	blt.n	800091e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	b2da      	uxtb	r2, r3
 800090c:	490c      	ldr	r1, [pc, #48]	@ (8000940 <__NVIC_SetPriority+0x4c>)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	0112      	lsls	r2, r2, #4
 8000914:	b2d2      	uxtb	r2, r2
 8000916:	440b      	add	r3, r1
 8000918:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800091c:	e00a      	b.n	8000934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4908      	ldr	r1, [pc, #32]	@ (8000944 <__NVIC_SetPriority+0x50>)
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f003 030f 	and.w	r3, r3, #15
 800092a:	3b04      	subs	r3, #4
 800092c:	0112      	lsls	r2, r2, #4
 800092e:	b2d2      	uxtb	r2, r2
 8000930:	440b      	add	r3, r1
 8000932:	761a      	strb	r2, [r3, #24]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000e100 	.word	0xe000e100
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000948:	b480      	push	{r7}
 800094a:	b089      	sub	sp, #36	@ 0x24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	f1c3 0307 	rsb	r3, r3, #7
 8000962:	2b04      	cmp	r3, #4
 8000964:	bf28      	it	cs
 8000966:	2304      	movcs	r3, #4
 8000968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3304      	adds	r3, #4
 800096e:	2b06      	cmp	r3, #6
 8000970:	d902      	bls.n	8000978 <NVIC_EncodePriority+0x30>
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3b03      	subs	r3, #3
 8000976:	e000      	b.n	800097a <NVIC_EncodePriority+0x32>
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	f04f 32ff 	mov.w	r2, #4294967295
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43da      	mvns	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	401a      	ands	r2, r3
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000990:	f04f 31ff 	mov.w	r1, #4294967295
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	43d9      	mvns	r1, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a0:	4313      	orrs	r3, r2
         );
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3724      	adds	r7, #36	@ 0x24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
	...

080009b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009c0:	d301      	bcc.n	80009c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00f      	b.n	80009e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c6:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <SysTick_Config+0x40>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ce:	210f      	movs	r1, #15
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	f7ff ff8e 	bl	80008f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d8:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <SysTick_Config+0x40>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009de:	4b04      	ldr	r3, [pc, #16]	@ (80009f0 <SysTick_Config+0x40>)
 80009e0:	2207      	movs	r2, #7
 80009e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	e000e010 	.word	0xe000e010

080009f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ff29 	bl	8000854 <__NVIC_SetPriorityGrouping>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b086      	sub	sp, #24
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	60b9      	str	r1, [r7, #8]
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a1c:	f7ff ff3e 	bl	800089c <__NVIC_GetPriorityGrouping>
 8000a20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	68b9      	ldr	r1, [r7, #8]
 8000a26:	6978      	ldr	r0, [r7, #20]
 8000a28:	f7ff ff8e 	bl	8000948 <NVIC_EncodePriority>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a32:	4611      	mov	r1, r2
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff5d 	bl	80008f4 <__NVIC_SetPriority>
}
 8000a3a:	bf00      	nop
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff31 	bl	80008b8 <__NVIC_EnableIRQ>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff ffa2 	bl	80009b0 <SysTick_Config>
 8000a6c:	4603      	mov	r3, r0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a7a:	f000 f802 	bl	8000a82 <HAL_SYSTICK_Callback>
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d008      	beq.n	8000aba <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2204      	movs	r2, #4
 8000aac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e022      	b.n	8000b00 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f022 020e 	bic.w	r2, r2, #14
 8000ac8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f022 0201 	bic.w	r2, r2, #1
 8000ad8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ade:	f003 021c 	and.w	r2, r3, #28
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8000aec:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2201      	movs	r2, #1
 8000af2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b14:	2300      	movs	r3, #0
 8000b16:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d005      	beq.n	8000b30 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2204      	movs	r2, #4
 8000b28:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	73fb      	strb	r3, [r7, #15]
 8000b2e:	e029      	b.n	8000b84 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f022 020e 	bic.w	r2, r2, #14
 8000b3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f022 0201 	bic.w	r2, r2, #1
 8000b4e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b54:	f003 021c 	and.w	r2, r3, #28
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b62:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2201      	movs	r2, #1
 8000b68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	4798      	blx	r3
    }
  }
  return status;
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b087      	sub	sp, #28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b9e:	e17f      	b.n	8000ea0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bac:	4013      	ands	r3, r2
 8000bae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f000 8171 	beq.w	8000e9a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 0303 	and.w	r3, r3, #3
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d005      	beq.n	8000bd0 <HAL_GPIO_Init+0x40>
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d130      	bne.n	8000c32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	2203      	movs	r2, #3
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68da      	ldr	r2, [r3, #12]
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c06:	2201      	movs	r2, #1
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	091b      	lsrs	r3, r3, #4
 8000c1c:	f003 0201 	and.w	r2, r3, #1
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f003 0303 	and.w	r3, r3, #3
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d118      	bne.n	8000c70 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c44:	2201      	movs	r2, #1
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	08db      	lsrs	r3, r3, #3
 8000c5a:	f003 0201 	and.w	r2, r3, #1
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	d017      	beq.n	8000cac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	2203      	movs	r2, #3
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f003 0303 	and.w	r3, r3, #3
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d123      	bne.n	8000d00 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	08da      	lsrs	r2, r3, #3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3208      	adds	r2, #8
 8000cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	f003 0307 	and.w	r3, r3, #7
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	220f      	movs	r2, #15
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	691a      	ldr	r2, [r3, #16]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	08da      	lsrs	r2, r3, #3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3208      	adds	r2, #8
 8000cfa:	6939      	ldr	r1, [r7, #16]
 8000cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0203 	and.w	r2, r3, #3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f000 80ac 	beq.w	8000e9a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	4b5f      	ldr	r3, [pc, #380]	@ (8000ec0 <HAL_GPIO_Init+0x330>)
 8000d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d46:	4a5e      	ldr	r2, [pc, #376]	@ (8000ec0 <HAL_GPIO_Init+0x330>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d4e:	4b5c      	ldr	r3, [pc, #368]	@ (8000ec0 <HAL_GPIO_Init+0x330>)
 8000d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d5a:	4a5a      	ldr	r2, [pc, #360]	@ (8000ec4 <HAL_GPIO_Init+0x334>)
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	089b      	lsrs	r3, r3, #2
 8000d60:	3302      	adds	r3, #2
 8000d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d66:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	220f      	movs	r2, #15
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d84:	d025      	beq.n	8000dd2 <HAL_GPIO_Init+0x242>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a4f      	ldr	r2, [pc, #316]	@ (8000ec8 <HAL_GPIO_Init+0x338>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d01f      	beq.n	8000dce <HAL_GPIO_Init+0x23e>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a4e      	ldr	r2, [pc, #312]	@ (8000ecc <HAL_GPIO_Init+0x33c>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d019      	beq.n	8000dca <HAL_GPIO_Init+0x23a>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a4d      	ldr	r2, [pc, #308]	@ (8000ed0 <HAL_GPIO_Init+0x340>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d013      	beq.n	8000dc6 <HAL_GPIO_Init+0x236>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a4c      	ldr	r2, [pc, #304]	@ (8000ed4 <HAL_GPIO_Init+0x344>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d00d      	beq.n	8000dc2 <HAL_GPIO_Init+0x232>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4b      	ldr	r2, [pc, #300]	@ (8000ed8 <HAL_GPIO_Init+0x348>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d007      	beq.n	8000dbe <HAL_GPIO_Init+0x22e>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a4a      	ldr	r2, [pc, #296]	@ (8000edc <HAL_GPIO_Init+0x34c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d101      	bne.n	8000dba <HAL_GPIO_Init+0x22a>
 8000db6:	2306      	movs	r3, #6
 8000db8:	e00c      	b.n	8000dd4 <HAL_GPIO_Init+0x244>
 8000dba:	2307      	movs	r3, #7
 8000dbc:	e00a      	b.n	8000dd4 <HAL_GPIO_Init+0x244>
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	e008      	b.n	8000dd4 <HAL_GPIO_Init+0x244>
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	e006      	b.n	8000dd4 <HAL_GPIO_Init+0x244>
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e004      	b.n	8000dd4 <HAL_GPIO_Init+0x244>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e002      	b.n	8000dd4 <HAL_GPIO_Init+0x244>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e000      	b.n	8000dd4 <HAL_GPIO_Init+0x244>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	f002 0203 	and.w	r2, r2, #3
 8000dda:	0092      	lsls	r2, r2, #2
 8000ddc:	4093      	lsls	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000de4:	4937      	ldr	r1, [pc, #220]	@ (8000ec4 <HAL_GPIO_Init+0x334>)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	089b      	lsrs	r3, r3, #2
 8000dea:	3302      	adds	r3, #2
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000df2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee0 <HAL_GPIO_Init+0x350>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e16:	4a32      	ldr	r2, [pc, #200]	@ (8000ee0 <HAL_GPIO_Init+0x350>)
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e1c:	4b30      	ldr	r3, [pc, #192]	@ (8000ee0 <HAL_GPIO_Init+0x350>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	43db      	mvns	r3, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e40:	4a27      	ldr	r2, [pc, #156]	@ (8000ee0 <HAL_GPIO_Init+0x350>)
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e46:	4b26      	ldr	r3, [pc, #152]	@ (8000ee0 <HAL_GPIO_Init+0x350>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e6a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ee0 <HAL_GPIO_Init+0x350>)
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee0 <HAL_GPIO_Init+0x350>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e94:	4a12      	ldr	r2, [pc, #72]	@ (8000ee0 <HAL_GPIO_Init+0x350>)
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f47f ae78 	bne.w	8000ba0 <HAL_GPIO_Init+0x10>
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	371c      	adds	r7, #28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010000 	.word	0x40010000
 8000ec8:	48000400 	.word	0x48000400
 8000ecc:	48000800 	.word	0x48000800
 8000ed0:	48000c00 	.word	0x48000c00
 8000ed4:	48001000 	.word	0x48001000
 8000ed8:	48001400 	.word	0x48001400
 8000edc:	48001800 	.word	0x48001800
 8000ee0:	40010400 	.word	0x40010400

08000ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	@ 0x24
 8000ee8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ef2:	4b3e      	ldr	r3, [pc, #248]	@ (8000fec <HAL_RCC_GetSysClockFreq+0x108>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f003 030c 	and.w	r3, r3, #12
 8000efa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000efc:	4b3b      	ldr	r3, [pc, #236]	@ (8000fec <HAL_RCC_GetSysClockFreq+0x108>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d005      	beq.n	8000f18 <HAL_RCC_GetSysClockFreq+0x34>
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	2b0c      	cmp	r3, #12
 8000f10:	d121      	bne.n	8000f56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d11e      	bne.n	8000f56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000f18:	4b34      	ldr	r3, [pc, #208]	@ (8000fec <HAL_RCC_GetSysClockFreq+0x108>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0308 	and.w	r3, r3, #8
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d107      	bne.n	8000f34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000f24:	4b31      	ldr	r3, [pc, #196]	@ (8000fec <HAL_RCC_GetSysClockFreq+0x108>)
 8000f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f2a:	0a1b      	lsrs	r3, r3, #8
 8000f2c:	f003 030f 	and.w	r3, r3, #15
 8000f30:	61fb      	str	r3, [r7, #28]
 8000f32:	e005      	b.n	8000f40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000f34:	4b2d      	ldr	r3, [pc, #180]	@ (8000fec <HAL_RCC_GetSysClockFreq+0x108>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	091b      	lsrs	r3, r3, #4
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8000f40:	4a2b      	ldr	r2, [pc, #172]	@ (8000ff0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d10d      	bne.n	8000f6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f54:	e00a      	b.n	8000f6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d102      	bne.n	8000f62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8000f5c:	4b25      	ldr	r3, [pc, #148]	@ (8000ff4 <HAL_RCC_GetSysClockFreq+0x110>)
 8000f5e:	61bb      	str	r3, [r7, #24]
 8000f60:	e004      	b.n	8000f6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	2b08      	cmp	r3, #8
 8000f66:	d101      	bne.n	8000f6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8000f68:	4b23      	ldr	r3, [pc, #140]	@ (8000ff8 <HAL_RCC_GetSysClockFreq+0x114>)
 8000f6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	2b0c      	cmp	r3, #12
 8000f70:	d134      	bne.n	8000fdc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000f72:	4b1e      	ldr	r3, [pc, #120]	@ (8000fec <HAL_RCC_GetSysClockFreq+0x108>)
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d003      	beq.n	8000f8a <HAL_RCC_GetSysClockFreq+0xa6>
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d003      	beq.n	8000f90 <HAL_RCC_GetSysClockFreq+0xac>
 8000f88:	e005      	b.n	8000f96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff4 <HAL_RCC_GetSysClockFreq+0x110>)
 8000f8c:	617b      	str	r3, [r7, #20]
      break;
 8000f8e:	e005      	b.n	8000f9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8000f90:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <HAL_RCC_GetSysClockFreq+0x114>)
 8000f92:	617b      	str	r3, [r7, #20]
      break;
 8000f94:	e002      	b.n	8000f9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	617b      	str	r3, [r7, #20]
      break;
 8000f9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000f9c:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <HAL_RCC_GetSysClockFreq+0x108>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	091b      	lsrs	r3, r3, #4
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000faa:	4b10      	ldr	r3, [pc, #64]	@ (8000fec <HAL_RCC_GetSysClockFreq+0x108>)
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	0a1b      	lsrs	r3, r3, #8
 8000fb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	fb03 f202 	mul.w	r2, r3, r2
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <HAL_RCC_GetSysClockFreq+0x108>)
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	0e5b      	lsrs	r3, r3, #25
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	3301      	adds	r3, #1
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8000fdc:	69bb      	ldr	r3, [r7, #24]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3724      	adds	r7, #36	@ 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	080028c8 	.word	0x080028c8
 8000ff4:	00f42400 	.word	0x00f42400
 8000ff8:	007a1200 	.word	0x007a1200

08000ffc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001000:	4b03      	ldr	r3, [pc, #12]	@ (8001010 <HAL_RCC_GetHCLKFreq+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000004 	.word	0x20000004

08001014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001018:	f7ff fff0 	bl	8000ffc <HAL_RCC_GetHCLKFreq>
 800101c:	4602      	mov	r2, r0
 800101e:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	0a1b      	lsrs	r3, r3, #8
 8001024:	f003 0307 	and.w	r3, r3, #7
 8001028:	4904      	ldr	r1, [pc, #16]	@ (800103c <HAL_RCC_GetPCLK1Freq+0x28>)
 800102a:	5ccb      	ldrb	r3, [r1, r3]
 800102c:	f003 031f 	and.w	r3, r3, #31
 8001030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001034:	4618      	mov	r0, r3
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000
 800103c:	080028c0 	.word	0x080028c0

08001040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001044:	f7ff ffda 	bl	8000ffc <HAL_RCC_GetHCLKFreq>
 8001048:	4602      	mov	r2, r0
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_RCC_GetPCLK2Freq+0x24>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	0adb      	lsrs	r3, r3, #11
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	4904      	ldr	r1, [pc, #16]	@ (8001068 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001056:	5ccb      	ldrb	r3, [r1, r3]
 8001058:	f003 031f 	and.w	r3, r3, #31
 800105c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001060:	4618      	mov	r0, r3
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40021000 	.word	0x40021000
 8001068:	080028c0 	.word	0x080028c0

0800106c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e040      	b.n	8001100 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001082:	2b00      	cmp	r3, #0
 8001084:	d106      	bne.n	8001094 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff fae4 	bl	800065c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2224      	movs	r2, #36	@ 0x24
 8001098:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 0201 	bic.w	r2, r2, #1
 80010a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d002      	beq.n	80010b8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fedc 	bl	8001e70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 fc21 	bl	8001900 <UART_SetConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d101      	bne.n	80010c8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e01b      	b.n	8001100 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	685a      	ldr	r2, [r3, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80010d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80010e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f042 0201 	orr.w	r2, r2, #1
 80010f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f000 ff5b 	bl	8001fb4 <UART_CheckIdleState>
 80010fe:	4603      	mov	r3, r0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	@ 0x28
 800110c:	af02      	add	r7, sp, #8
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	4613      	mov	r3, r2
 8001116:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800111c:	2b20      	cmp	r3, #32
 800111e:	d177      	bne.n	8001210 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d002      	beq.n	800112c <HAL_UART_Transmit+0x24>
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e070      	b.n	8001212 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2200      	movs	r2, #0
 8001134:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2221      	movs	r2, #33	@ 0x21
 800113c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800113e:	f7ff fb7d 	bl	800083c <HAL_GetTick>
 8001142:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	88fa      	ldrh	r2, [r7, #6]
 8001148:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	88fa      	ldrh	r2, [r7, #6]
 8001150:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800115c:	d108      	bne.n	8001170 <HAL_UART_Transmit+0x68>
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d104      	bne.n	8001170 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	61bb      	str	r3, [r7, #24]
 800116e:	e003      	b.n	8001178 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001178:	e02f      	b.n	80011da <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	2200      	movs	r2, #0
 8001182:	2180      	movs	r1, #128	@ 0x80
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f000 ffbd 	bl	8002104 <UART_WaitOnFlagUntilTimeout>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d004      	beq.n	800119a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2220      	movs	r2, #32
 8001194:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e03b      	b.n	8001212 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d10b      	bne.n	80011b8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	881a      	ldrh	r2, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011ac:	b292      	uxth	r2, r2
 80011ae:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	3302      	adds	r3, #2
 80011b4:	61bb      	str	r3, [r7, #24]
 80011b6:	e007      	b.n	80011c8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3301      	adds	r3, #1
 80011c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	3b01      	subs	r3, #1
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1c9      	bne.n	800117a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	2200      	movs	r2, #0
 80011ee:	2140      	movs	r1, #64	@ 0x40
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f000 ff87 	bl	8002104 <UART_WaitOnFlagUntilTimeout>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d004      	beq.n	8001206 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2220      	movs	r2, #32
 8001200:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e005      	b.n	8001212 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2220      	movs	r2, #32
 800120a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800120c:	2300      	movs	r3, #0
 800120e:	e000      	b.n	8001212 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8001210:	2302      	movs	r3, #2
  }
}
 8001212:	4618      	mov	r0, r3
 8001214:	3720      	adds	r7, #32
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	@ 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	4613      	mov	r3, r2
 8001228:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001230:	2b20      	cmp	r3, #32
 8001232:	d137      	bne.n	80012a4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <HAL_UART_Receive_IT+0x24>
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e030      	b.n	80012a6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2200      	movs	r2, #0
 8001248:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a18      	ldr	r2, [pc, #96]	@ (80012b0 <HAL_UART_Receive_IT+0x94>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d01f      	beq.n	8001294 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d018      	beq.n	8001294 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	e853 3f00 	ldrex	r3, [r3]
 800126e:	613b      	str	r3, [r7, #16]
   return(result);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001276:	627b      	str	r3, [r7, #36]	@ 0x24
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	623b      	str	r3, [r7, #32]
 8001282:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001284:	69f9      	ldr	r1, [r7, #28]
 8001286:	6a3a      	ldr	r2, [r7, #32]
 8001288:	e841 2300 	strex	r3, r2, [r1]
 800128c:	61bb      	str	r3, [r7, #24]
   return(result);
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1e6      	bne.n	8001262 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001294:	88fb      	ldrh	r3, [r7, #6]
 8001296:	461a      	mov	r2, r3
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f000 ffa0 	bl	80021e0 <UART_Start_Receive_IT>
 80012a0:	4603      	mov	r3, r0
 80012a2:	e000      	b.n	80012a6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80012a4:	2302      	movs	r3, #2
  }
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3728      	adds	r7, #40	@ 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40008000 	.word	0x40008000

080012b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b0ba      	sub	sp, #232	@ 0xe8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80012da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80012de:	f640 030f 	movw	r3, #2063	@ 0x80f
 80012e2:	4013      	ands	r3, r2
 80012e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80012e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d115      	bne.n	800131c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80012f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80012f4:	f003 0320 	and.w	r3, r3, #32
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00f      	beq.n	800131c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80012fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001300:	f003 0320 	and.w	r3, r3, #32
 8001304:	2b00      	cmp	r3, #0
 8001306:	d009      	beq.n	800131c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 82ca 	beq.w	80018a6 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	4798      	blx	r3
      }
      return;
 800131a:	e2c4      	b.n	80018a6 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800131c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 8117 	beq.w	8001554 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d106      	bne.n	8001340 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001332:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8001336:	4b85      	ldr	r3, [pc, #532]	@ (800154c <HAL_UART_IRQHandler+0x298>)
 8001338:	4013      	ands	r3, r2
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 810a 	beq.w	8001554 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b00      	cmp	r3, #0
 800134a:	d011      	beq.n	8001370 <HAL_UART_IRQHandler+0xbc>
 800134c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00b      	beq.n	8001370 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2201      	movs	r2, #1
 800135e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001366:	f043 0201 	orr.w	r2, r3, #1
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d011      	beq.n	80013a0 <HAL_UART_IRQHandler+0xec>
 800137c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00b      	beq.n	80013a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2202      	movs	r2, #2
 800138e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001396:	f043 0204 	orr.w	r2, r3, #4
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80013a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d011      	beq.n	80013d0 <HAL_UART_IRQHandler+0x11c>
 80013ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d00b      	beq.n	80013d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2204      	movs	r2, #4
 80013be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80013c6:	f043 0202 	orr.w	r2, r3, #2
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80013d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80013d4:	f003 0308 	and.w	r3, r3, #8
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d017      	beq.n	800140c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80013dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80013e0:	f003 0320 	and.w	r3, r3, #32
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d105      	bne.n	80013f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80013e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80013ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00b      	beq.n	800140c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2208      	movs	r2, #8
 80013fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001402:	f043 0208 	orr.w	r2, r3, #8
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800140c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001410:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001414:	2b00      	cmp	r3, #0
 8001416:	d012      	beq.n	800143e <HAL_UART_IRQHandler+0x18a>
 8001418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800141c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00c      	beq.n	800143e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800142c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001434:	f043 0220 	orr.w	r2, r3, #32
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 8230 	beq.w	80018aa <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800144a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800144e:	f003 0320 	and.w	r3, r3, #32
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00d      	beq.n	8001472 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800145a:	f003 0320 	and.w	r3, r3, #32
 800145e:	2b00      	cmp	r3, #0
 8001460:	d007      	beq.n	8001472 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001478:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001486:	2b40      	cmp	r3, #64	@ 0x40
 8001488:	d005      	beq.n	8001496 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800148a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800148e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001492:	2b00      	cmp	r3, #0
 8001494:	d04f      	beq.n	8001536 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 ff68 	bl	800236c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014a6:	2b40      	cmp	r3, #64	@ 0x40
 80014a8:	d141      	bne.n	800152e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	3308      	adds	r3, #8
 80014b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80014b8:	e853 3f00 	ldrex	r3, [r3]
 80014bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80014c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80014c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	3308      	adds	r3, #8
 80014d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80014d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80014da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80014e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80014e6:	e841 2300 	strex	r3, r2, [r1]
 80014ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80014ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1d9      	bne.n	80014aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d013      	beq.n	8001526 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001502:	4a13      	ldr	r2, [pc, #76]	@ (8001550 <HAL_UART_IRQHandler+0x29c>)
 8001504:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fafe 	bl	8000b0c <HAL_DMA_Abort_IT>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d017      	beq.n	8001546 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800151a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001520:	4610      	mov	r0, r2
 8001522:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001524:	e00f      	b.n	8001546 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 f9d4 	bl	80018d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800152c:	e00b      	b.n	8001546 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 f9d0 	bl	80018d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001534:	e007      	b.n	8001546 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f9cc 	bl	80018d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8001544:	e1b1      	b.n	80018aa <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001546:	bf00      	nop
    return;
 8001548:	e1af      	b.n	80018aa <HAL_UART_IRQHandler+0x5f6>
 800154a:	bf00      	nop
 800154c:	04000120 	.word	0x04000120
 8001550:	08002435 	.word	0x08002435

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001558:	2b01      	cmp	r3, #1
 800155a:	f040 816a 	bne.w	8001832 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800155e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 8163 	beq.w	8001832 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800156c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001570:	f003 0310 	and.w	r3, r3, #16
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 815c 	beq.w	8001832 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2210      	movs	r2, #16
 8001580:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800158c:	2b40      	cmp	r3, #64	@ 0x40
 800158e:	f040 80d4 	bne.w	800173a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800159e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80ad 	beq.w	8001702 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80015ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80015b2:	429a      	cmp	r2, r3
 80015b4:	f080 80a5 	bcs.w	8001702 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80015be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0320 	and.w	r3, r3, #32
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f040 8086 	bne.w	80016e0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80015e0:	e853 3f00 	ldrex	r3, [r3]
 80015e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80015e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80015ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80015fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001602:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001606:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800160a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800160e:	e841 2300 	strex	r3, r2, [r1]
 8001612:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001616:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1da      	bne.n	80015d4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	3308      	adds	r3, #8
 8001624:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001626:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001628:	e853 3f00 	ldrex	r3, [r3]
 800162c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800162e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	3308      	adds	r3, #8
 800163e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001642:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001646:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001648:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800164a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800164e:	e841 2300 	strex	r3, r2, [r1]
 8001652:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001654:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1e1      	bne.n	800161e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3308      	adds	r3, #8
 8001660:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001662:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001664:	e853 3f00 	ldrex	r3, [r3]
 8001668:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800166a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800166c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001670:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	3308      	adds	r3, #8
 800167a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800167e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001680:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001682:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001684:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001686:	e841 2300 	strex	r3, r2, [r1]
 800168a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800168c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1e3      	bne.n	800165a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2220      	movs	r2, #32
 8001696:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80016a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016a8:	e853 3f00 	ldrex	r3, [r3]
 80016ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80016ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016b0:	f023 0310 	bic.w	r3, r3, #16
 80016b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80016c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80016c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80016ca:	e841 2300 	strex	r3, r2, [r1]
 80016ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80016d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1e4      	bne.n	80016a0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff f9d8 	bl	8000a90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2202      	movs	r2, #2
 80016e4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	4619      	mov	r1, r3
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f8f4 	bl	80018e8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8001700:	e0d5      	b.n	80018ae <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8001708:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800170c:	429a      	cmp	r2, r3
 800170e:	f040 80ce 	bne.w	80018ae <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0320 	and.w	r3, r3, #32
 800171e:	2b20      	cmp	r3, #32
 8001720:	f040 80c5 	bne.w	80018ae <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2202      	movs	r2, #2
 8001728:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8001730:	4619      	mov	r1, r3
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f8d8 	bl	80018e8 <HAL_UARTEx_RxEventCallback>
      return;
 8001738:	e0b9      	b.n	80018ae <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001746:	b29b      	uxth	r3, r3
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001754:	b29b      	uxth	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 80ab 	beq.w	80018b2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800175c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 80a6 	beq.w	80018b2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800176c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800176e:	e853 3f00 	ldrex	r3, [r3]
 8001772:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001776:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800177a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001788:	647b      	str	r3, [r7, #68]	@ 0x44
 800178a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800178c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800178e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001790:	e841 2300 	strex	r3, r2, [r1]
 8001794:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1e4      	bne.n	8001766 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	3308      	adds	r3, #8
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a6:	e853 3f00 	ldrex	r3, [r3]
 80017aa:	623b      	str	r3, [r7, #32]
   return(result);
 80017ac:	6a3b      	ldr	r3, [r7, #32]
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3308      	adds	r3, #8
 80017bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80017c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80017c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80017c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017c8:	e841 2300 	strex	r3, r2, [r1]
 80017cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80017ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1e3      	bne.n	800179c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2220      	movs	r2, #32
 80017d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	e853 3f00 	ldrex	r3, [r3]
 80017f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f023 0310 	bic.w	r3, r3, #16
 80017fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800180a:	61fb      	str	r3, [r7, #28]
 800180c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800180e:	69b9      	ldr	r1, [r7, #24]
 8001810:	69fa      	ldr	r2, [r7, #28]
 8001812:	e841 2300 	strex	r3, r2, [r1]
 8001816:	617b      	str	r3, [r7, #20]
   return(result);
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1e4      	bne.n	80017e8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2202      	movs	r2, #2
 8001822:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001824:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001828:	4619      	mov	r1, r3
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f85c 	bl	80018e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001830:	e03f      	b.n	80018b2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001836:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00e      	beq.n	800185c <HAL_UART_IRQHandler+0x5a8>
 800183e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d008      	beq.n	800185c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001852:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 ffe9 	bl	800282c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800185a:	e02d      	b.n	80018b8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800185c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00e      	beq.n	8001886 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800186c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001870:	2b00      	cmp	r3, #0
 8001872:	d008      	beq.n	8001886 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001878:	2b00      	cmp	r3, #0
 800187a:	d01c      	beq.n	80018b6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	4798      	blx	r3
    }
    return;
 8001884:	e017      	b.n	80018b6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800188a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800188e:	2b00      	cmp	r3, #0
 8001890:	d012      	beq.n	80018b8 <HAL_UART_IRQHandler+0x604>
 8001892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00c      	beq.n	80018b8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 fdde 	bl	8002460 <UART_EndTransmit_IT>
    return;
 80018a4:	e008      	b.n	80018b8 <HAL_UART_IRQHandler+0x604>
      return;
 80018a6:	bf00      	nop
 80018a8:	e006      	b.n	80018b8 <HAL_UART_IRQHandler+0x604>
    return;
 80018aa:	bf00      	nop
 80018ac:	e004      	b.n	80018b8 <HAL_UART_IRQHandler+0x604>
      return;
 80018ae:	bf00      	nop
 80018b0:	e002      	b.n	80018b8 <HAL_UART_IRQHandler+0x604>
      return;
 80018b2:	bf00      	nop
 80018b4:	e000      	b.n	80018b8 <HAL_UART_IRQHandler+0x604>
    return;
 80018b6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80018b8:	37e8      	adds	r7, #232	@ 0xe8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop

080018c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001904:	b08a      	sub	sp, #40	@ 0x28
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	431a      	orrs	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	431a      	orrs	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	4313      	orrs	r3, r2
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4ba4      	ldr	r3, [pc, #656]	@ (8001bc0 <UART_SetConfig+0x2c0>)
 8001930:	4013      	ands	r3, r2
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001938:	430b      	orrs	r3, r1
 800193a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a99      	ldr	r2, [pc, #612]	@ (8001bc4 <UART_SetConfig+0x2c4>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d004      	beq.n	800196c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001968:	4313      	orrs	r3, r2
 800196a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800197c:	430a      	orrs	r2, r1
 800197e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a90      	ldr	r2, [pc, #576]	@ (8001bc8 <UART_SetConfig+0x2c8>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d126      	bne.n	80019d8 <UART_SetConfig+0xd8>
 800198a:	4b90      	ldr	r3, [pc, #576]	@ (8001bcc <UART_SetConfig+0x2cc>)
 800198c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b03      	cmp	r3, #3
 8001996:	d81b      	bhi.n	80019d0 <UART_SetConfig+0xd0>
 8001998:	a201      	add	r2, pc, #4	@ (adr r2, 80019a0 <UART_SetConfig+0xa0>)
 800199a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199e:	bf00      	nop
 80019a0:	080019b1 	.word	0x080019b1
 80019a4:	080019c1 	.word	0x080019c1
 80019a8:	080019b9 	.word	0x080019b9
 80019ac:	080019c9 	.word	0x080019c9
 80019b0:	2301      	movs	r3, #1
 80019b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80019b6:	e116      	b.n	8001be6 <UART_SetConfig+0x2e6>
 80019b8:	2302      	movs	r3, #2
 80019ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80019be:	e112      	b.n	8001be6 <UART_SetConfig+0x2e6>
 80019c0:	2304      	movs	r3, #4
 80019c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80019c6:	e10e      	b.n	8001be6 <UART_SetConfig+0x2e6>
 80019c8:	2308      	movs	r3, #8
 80019ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80019ce:	e10a      	b.n	8001be6 <UART_SetConfig+0x2e6>
 80019d0:	2310      	movs	r3, #16
 80019d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80019d6:	e106      	b.n	8001be6 <UART_SetConfig+0x2e6>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a7c      	ldr	r2, [pc, #496]	@ (8001bd0 <UART_SetConfig+0x2d0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d138      	bne.n	8001a54 <UART_SetConfig+0x154>
 80019e2:	4b7a      	ldr	r3, [pc, #488]	@ (8001bcc <UART_SetConfig+0x2cc>)
 80019e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019e8:	f003 030c 	and.w	r3, r3, #12
 80019ec:	2b0c      	cmp	r3, #12
 80019ee:	d82d      	bhi.n	8001a4c <UART_SetConfig+0x14c>
 80019f0:	a201      	add	r2, pc, #4	@ (adr r2, 80019f8 <UART_SetConfig+0xf8>)
 80019f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f6:	bf00      	nop
 80019f8:	08001a2d 	.word	0x08001a2d
 80019fc:	08001a4d 	.word	0x08001a4d
 8001a00:	08001a4d 	.word	0x08001a4d
 8001a04:	08001a4d 	.word	0x08001a4d
 8001a08:	08001a3d 	.word	0x08001a3d
 8001a0c:	08001a4d 	.word	0x08001a4d
 8001a10:	08001a4d 	.word	0x08001a4d
 8001a14:	08001a4d 	.word	0x08001a4d
 8001a18:	08001a35 	.word	0x08001a35
 8001a1c:	08001a4d 	.word	0x08001a4d
 8001a20:	08001a4d 	.word	0x08001a4d
 8001a24:	08001a4d 	.word	0x08001a4d
 8001a28:	08001a45 	.word	0x08001a45
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001a32:	e0d8      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001a34:	2302      	movs	r3, #2
 8001a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001a3a:	e0d4      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001a42:	e0d0      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001a44:	2308      	movs	r3, #8
 8001a46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001a4a:	e0cc      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001a4c:	2310      	movs	r3, #16
 8001a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001a52:	e0c8      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a5e      	ldr	r2, [pc, #376]	@ (8001bd4 <UART_SetConfig+0x2d4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d125      	bne.n	8001aaa <UART_SetConfig+0x1aa>
 8001a5e:	4b5b      	ldr	r3, [pc, #364]	@ (8001bcc <UART_SetConfig+0x2cc>)
 8001a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a64:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001a68:	2b30      	cmp	r3, #48	@ 0x30
 8001a6a:	d016      	beq.n	8001a9a <UART_SetConfig+0x19a>
 8001a6c:	2b30      	cmp	r3, #48	@ 0x30
 8001a6e:	d818      	bhi.n	8001aa2 <UART_SetConfig+0x1a2>
 8001a70:	2b20      	cmp	r3, #32
 8001a72:	d00a      	beq.n	8001a8a <UART_SetConfig+0x18a>
 8001a74:	2b20      	cmp	r3, #32
 8001a76:	d814      	bhi.n	8001aa2 <UART_SetConfig+0x1a2>
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <UART_SetConfig+0x182>
 8001a7c:	2b10      	cmp	r3, #16
 8001a7e:	d008      	beq.n	8001a92 <UART_SetConfig+0x192>
 8001a80:	e00f      	b.n	8001aa2 <UART_SetConfig+0x1a2>
 8001a82:	2300      	movs	r3, #0
 8001a84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001a88:	e0ad      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001a90:	e0a9      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001a92:	2304      	movs	r3, #4
 8001a94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001a98:	e0a5      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001a9a:	2308      	movs	r3, #8
 8001a9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001aa0:	e0a1      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001aa2:	2310      	movs	r3, #16
 8001aa4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001aa8:	e09d      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a4a      	ldr	r2, [pc, #296]	@ (8001bd8 <UART_SetConfig+0x2d8>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d125      	bne.n	8001b00 <UART_SetConfig+0x200>
 8001ab4:	4b45      	ldr	r3, [pc, #276]	@ (8001bcc <UART_SetConfig+0x2cc>)
 8001ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001abe:	2bc0      	cmp	r3, #192	@ 0xc0
 8001ac0:	d016      	beq.n	8001af0 <UART_SetConfig+0x1f0>
 8001ac2:	2bc0      	cmp	r3, #192	@ 0xc0
 8001ac4:	d818      	bhi.n	8001af8 <UART_SetConfig+0x1f8>
 8001ac6:	2b80      	cmp	r3, #128	@ 0x80
 8001ac8:	d00a      	beq.n	8001ae0 <UART_SetConfig+0x1e0>
 8001aca:	2b80      	cmp	r3, #128	@ 0x80
 8001acc:	d814      	bhi.n	8001af8 <UART_SetConfig+0x1f8>
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <UART_SetConfig+0x1d8>
 8001ad2:	2b40      	cmp	r3, #64	@ 0x40
 8001ad4:	d008      	beq.n	8001ae8 <UART_SetConfig+0x1e8>
 8001ad6:	e00f      	b.n	8001af8 <UART_SetConfig+0x1f8>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001ade:	e082      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001ae6:	e07e      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001ae8:	2304      	movs	r3, #4
 8001aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001aee:	e07a      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001af0:	2308      	movs	r3, #8
 8001af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001af6:	e076      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001af8:	2310      	movs	r3, #16
 8001afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001afe:	e072      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a35      	ldr	r2, [pc, #212]	@ (8001bdc <UART_SetConfig+0x2dc>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d12a      	bne.n	8001b60 <UART_SetConfig+0x260>
 8001b0a:	4b30      	ldr	r3, [pc, #192]	@ (8001bcc <UART_SetConfig+0x2cc>)
 8001b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001b18:	d01a      	beq.n	8001b50 <UART_SetConfig+0x250>
 8001b1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001b1e:	d81b      	bhi.n	8001b58 <UART_SetConfig+0x258>
 8001b20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b24:	d00c      	beq.n	8001b40 <UART_SetConfig+0x240>
 8001b26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b2a:	d815      	bhi.n	8001b58 <UART_SetConfig+0x258>
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <UART_SetConfig+0x238>
 8001b30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b34:	d008      	beq.n	8001b48 <UART_SetConfig+0x248>
 8001b36:	e00f      	b.n	8001b58 <UART_SetConfig+0x258>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001b3e:	e052      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001b40:	2302      	movs	r3, #2
 8001b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001b46:	e04e      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001b48:	2304      	movs	r3, #4
 8001b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001b4e:	e04a      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001b50:	2308      	movs	r3, #8
 8001b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001b56:	e046      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001b58:	2310      	movs	r3, #16
 8001b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001b5e:	e042      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a17      	ldr	r2, [pc, #92]	@ (8001bc4 <UART_SetConfig+0x2c4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d13a      	bne.n	8001be0 <UART_SetConfig+0x2e0>
 8001b6a:	4b18      	ldr	r3, [pc, #96]	@ (8001bcc <UART_SetConfig+0x2cc>)
 8001b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001b78:	d01a      	beq.n	8001bb0 <UART_SetConfig+0x2b0>
 8001b7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001b7e:	d81b      	bhi.n	8001bb8 <UART_SetConfig+0x2b8>
 8001b80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b84:	d00c      	beq.n	8001ba0 <UART_SetConfig+0x2a0>
 8001b86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b8a:	d815      	bhi.n	8001bb8 <UART_SetConfig+0x2b8>
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <UART_SetConfig+0x298>
 8001b90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b94:	d008      	beq.n	8001ba8 <UART_SetConfig+0x2a8>
 8001b96:	e00f      	b.n	8001bb8 <UART_SetConfig+0x2b8>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001b9e:	e022      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001ba6:	e01e      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001ba8:	2304      	movs	r3, #4
 8001baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001bae:	e01a      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001bb0:	2308      	movs	r3, #8
 8001bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001bb6:	e016      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001bb8:	2310      	movs	r3, #16
 8001bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001bbe:	e012      	b.n	8001be6 <UART_SetConfig+0x2e6>
 8001bc0:	efff69f3 	.word	0xefff69f3
 8001bc4:	40008000 	.word	0x40008000
 8001bc8:	40013800 	.word	0x40013800
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40004400 	.word	0x40004400
 8001bd4:	40004800 	.word	0x40004800
 8001bd8:	40004c00 	.word	0x40004c00
 8001bdc:	40005000 	.word	0x40005000
 8001be0:	2310      	movs	r3, #16
 8001be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a9f      	ldr	r2, [pc, #636]	@ (8001e68 <UART_SetConfig+0x568>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d17a      	bne.n	8001ce6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8001bf0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d824      	bhi.n	8001c42 <UART_SetConfig+0x342>
 8001bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8001c00 <UART_SetConfig+0x300>)
 8001bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfe:	bf00      	nop
 8001c00:	08001c25 	.word	0x08001c25
 8001c04:	08001c43 	.word	0x08001c43
 8001c08:	08001c2d 	.word	0x08001c2d
 8001c0c:	08001c43 	.word	0x08001c43
 8001c10:	08001c33 	.word	0x08001c33
 8001c14:	08001c43 	.word	0x08001c43
 8001c18:	08001c43 	.word	0x08001c43
 8001c1c:	08001c43 	.word	0x08001c43
 8001c20:	08001c3b 	.word	0x08001c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001c24:	f7ff f9f6 	bl	8001014 <HAL_RCC_GetPCLK1Freq>
 8001c28:	61f8      	str	r0, [r7, #28]
        break;
 8001c2a:	e010      	b.n	8001c4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001c2c:	4b8f      	ldr	r3, [pc, #572]	@ (8001e6c <UART_SetConfig+0x56c>)
 8001c2e:	61fb      	str	r3, [r7, #28]
        break;
 8001c30:	e00d      	b.n	8001c4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001c32:	f7ff f957 	bl	8000ee4 <HAL_RCC_GetSysClockFreq>
 8001c36:	61f8      	str	r0, [r7, #28]
        break;
 8001c38:	e009      	b.n	8001c4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001c3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c3e:	61fb      	str	r3, [r7, #28]
        break;
 8001c40:	e005      	b.n	8001c4e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8001c4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80fb 	beq.w	8001e4c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d305      	bcc.n	8001c72 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001c6c:	69fa      	ldr	r2, [r7, #28]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d903      	bls.n	8001c7a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001c78:	e0e8      	b.n	8001e4c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	461c      	mov	r4, r3
 8001c80:	4615      	mov	r5, r2
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	022b      	lsls	r3, r5, #8
 8001c8c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8001c90:	0222      	lsls	r2, r4, #8
 8001c92:	68f9      	ldr	r1, [r7, #12]
 8001c94:	6849      	ldr	r1, [r1, #4]
 8001c96:	0849      	lsrs	r1, r1, #1
 8001c98:	2000      	movs	r0, #0
 8001c9a:	4688      	mov	r8, r1
 8001c9c:	4681      	mov	r9, r0
 8001c9e:	eb12 0a08 	adds.w	sl, r2, r8
 8001ca2:	eb43 0b09 	adc.w	fp, r3, r9
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cb4:	4650      	mov	r0, sl
 8001cb6:	4659      	mov	r1, fp
 8001cb8:	f7fe fa8e 	bl	80001d8 <__aeabi_uldivmod>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001cca:	d308      	bcc.n	8001cde <UART_SetConfig+0x3de>
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001cd2:	d204      	bcs.n	8001cde <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	60da      	str	r2, [r3, #12]
 8001cdc:	e0b6      	b.n	8001e4c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001ce4:	e0b2      	b.n	8001e4c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cee:	d15e      	bne.n	8001dae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8001cf0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d828      	bhi.n	8001d4a <UART_SetConfig+0x44a>
 8001cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8001d00 <UART_SetConfig+0x400>)
 8001cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfe:	bf00      	nop
 8001d00:	08001d25 	.word	0x08001d25
 8001d04:	08001d2d 	.word	0x08001d2d
 8001d08:	08001d35 	.word	0x08001d35
 8001d0c:	08001d4b 	.word	0x08001d4b
 8001d10:	08001d3b 	.word	0x08001d3b
 8001d14:	08001d4b 	.word	0x08001d4b
 8001d18:	08001d4b 	.word	0x08001d4b
 8001d1c:	08001d4b 	.word	0x08001d4b
 8001d20:	08001d43 	.word	0x08001d43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001d24:	f7ff f976 	bl	8001014 <HAL_RCC_GetPCLK1Freq>
 8001d28:	61f8      	str	r0, [r7, #28]
        break;
 8001d2a:	e014      	b.n	8001d56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001d2c:	f7ff f988 	bl	8001040 <HAL_RCC_GetPCLK2Freq>
 8001d30:	61f8      	str	r0, [r7, #28]
        break;
 8001d32:	e010      	b.n	8001d56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001d34:	4b4d      	ldr	r3, [pc, #308]	@ (8001e6c <UART_SetConfig+0x56c>)
 8001d36:	61fb      	str	r3, [r7, #28]
        break;
 8001d38:	e00d      	b.n	8001d56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001d3a:	f7ff f8d3 	bl	8000ee4 <HAL_RCC_GetSysClockFreq>
 8001d3e:	61f8      	str	r0, [r7, #28]
        break;
 8001d40:	e009      	b.n	8001d56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001d42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d46:	61fb      	str	r3, [r7, #28]
        break;
 8001d48:	e005      	b.n	8001d56 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8001d54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d077      	beq.n	8001e4c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	005a      	lsls	r2, r3, #1
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	085b      	lsrs	r3, r3, #1
 8001d66:	441a      	add	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d70:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2b0f      	cmp	r3, #15
 8001d76:	d916      	bls.n	8001da6 <UART_SetConfig+0x4a6>
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d7e:	d212      	bcs.n	8001da6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	f023 030f 	bic.w	r3, r3, #15
 8001d88:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	085b      	lsrs	r3, r3, #1
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	8afb      	ldrh	r3, [r7, #22]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	8afa      	ldrh	r2, [r7, #22]
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	e052      	b.n	8001e4c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001dac:	e04e      	b.n	8001e4c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001dae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d827      	bhi.n	8001e06 <UART_SetConfig+0x506>
 8001db6:	a201      	add	r2, pc, #4	@ (adr r2, 8001dbc <UART_SetConfig+0x4bc>)
 8001db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dbc:	08001de1 	.word	0x08001de1
 8001dc0:	08001de9 	.word	0x08001de9
 8001dc4:	08001df1 	.word	0x08001df1
 8001dc8:	08001e07 	.word	0x08001e07
 8001dcc:	08001df7 	.word	0x08001df7
 8001dd0:	08001e07 	.word	0x08001e07
 8001dd4:	08001e07 	.word	0x08001e07
 8001dd8:	08001e07 	.word	0x08001e07
 8001ddc:	08001dff 	.word	0x08001dff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001de0:	f7ff f918 	bl	8001014 <HAL_RCC_GetPCLK1Freq>
 8001de4:	61f8      	str	r0, [r7, #28]
        break;
 8001de6:	e014      	b.n	8001e12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001de8:	f7ff f92a 	bl	8001040 <HAL_RCC_GetPCLK2Freq>
 8001dec:	61f8      	str	r0, [r7, #28]
        break;
 8001dee:	e010      	b.n	8001e12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001df0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e6c <UART_SetConfig+0x56c>)
 8001df2:	61fb      	str	r3, [r7, #28]
        break;
 8001df4:	e00d      	b.n	8001e12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001df6:	f7ff f875 	bl	8000ee4 <HAL_RCC_GetSysClockFreq>
 8001dfa:	61f8      	str	r0, [r7, #28]
        break;
 8001dfc:	e009      	b.n	8001e12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001dfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e02:	61fb      	str	r3, [r7, #28]
        break;
 8001e04:	e005      	b.n	8001e12 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8001e10:	bf00      	nop
    }

    if (pclk != 0U)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d019      	beq.n	8001e4c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	085a      	lsrs	r2, r3, #1
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	441a      	add	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2b0f      	cmp	r3, #15
 8001e30:	d909      	bls.n	8001e46 <UART_SetConfig+0x546>
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e38:	d205      	bcs.n	8001e46 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	60da      	str	r2, [r3, #12]
 8001e44:	e002      	b.n	8001e4c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8001e58:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3728      	adds	r7, #40	@ 0x28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e66:	bf00      	nop
 8001e68:	40008000 	.word	0x40008000
 8001e6c:	00f42400 	.word	0x00f42400

08001e70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00a      	beq.n	8001e9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00a      	beq.n	8001ebc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00a      	beq.n	8001ede <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00a      	beq.n	8001f22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f26:	f003 0320 	and.w	r3, r3, #32
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01a      	beq.n	8001f86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f6e:	d10a      	bne.n	8001f86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00a      	beq.n	8001fa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	605a      	str	r2, [r3, #4]
  }
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b098      	sub	sp, #96	@ 0x60
 8001fb8:	af02      	add	r7, sp, #8
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001fc4:	f7fe fc3a 	bl	800083c <HAL_GetTick>
 8001fc8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d12e      	bne.n	8002036 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001fd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f88c 	bl	8002104 <UART_WaitOnFlagUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d021      	beq.n	8002036 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ffa:	e853 3f00 	ldrex	r3, [r3]
 8001ffe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002002:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002006:	653b      	str	r3, [r7, #80]	@ 0x50
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	461a      	mov	r2, r3
 800200e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002010:	647b      	str	r3, [r7, #68]	@ 0x44
 8002012:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002014:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002016:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002018:	e841 2300 	strex	r3, r2, [r1]
 800201c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800201e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1e6      	bne.n	8001ff2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2220      	movs	r2, #32
 8002028:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e062      	b.n	80020fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b04      	cmp	r3, #4
 8002042:	d149      	bne.n	80020d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002044:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800204c:	2200      	movs	r2, #0
 800204e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f856 	bl	8002104 <UART_WaitOnFlagUntilTimeout>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d03c      	beq.n	80020d8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002066:	e853 3f00 	ldrex	r3, [r3]
 800206a:	623b      	str	r3, [r7, #32]
   return(result);
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002072:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800207c:	633b      	str	r3, [r7, #48]	@ 0x30
 800207e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002080:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002082:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002084:	e841 2300 	strex	r3, r2, [r1]
 8002088:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800208a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1e6      	bne.n	800205e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	3308      	adds	r3, #8
 8002096:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	e853 3f00 	ldrex	r3, [r3]
 800209e:	60fb      	str	r3, [r7, #12]
   return(result);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f023 0301 	bic.w	r3, r3, #1
 80020a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	3308      	adds	r3, #8
 80020ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020b0:	61fa      	str	r2, [r7, #28]
 80020b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020b4:	69b9      	ldr	r1, [r7, #24]
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	e841 2300 	strex	r3, r2, [r1]
 80020bc:	617b      	str	r3, [r7, #20]
   return(result);
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1e5      	bne.n	8002090 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e011      	b.n	80020fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2220      	movs	r2, #32
 80020dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2220      	movs	r2, #32
 80020e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3758      	adds	r7, #88	@ 0x58
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	4613      	mov	r3, r2
 8002112:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002114:	e04f      	b.n	80021b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d04b      	beq.n	80021b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800211e:	f7fe fb8d 	bl	800083c <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	429a      	cmp	r2, r3
 800212c:	d302      	bcc.n	8002134 <UART_WaitOnFlagUntilTimeout+0x30>
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e04e      	b.n	80021d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b00      	cmp	r3, #0
 8002144:	d037      	beq.n	80021b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b80      	cmp	r3, #128	@ 0x80
 800214a:	d034      	beq.n	80021b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b40      	cmp	r3, #64	@ 0x40
 8002150:	d031      	beq.n	80021b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b08      	cmp	r3, #8
 800215e:	d110      	bne.n	8002182 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2208      	movs	r2, #8
 8002166:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 f8ff 	bl	800236c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2208      	movs	r2, #8
 8002172:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e029      	b.n	80021d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800218c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002190:	d111      	bne.n	80021b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800219a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 f8e5 	bl	800236c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2220      	movs	r2, #32
 80021a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e00f      	b.n	80021d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	69da      	ldr	r2, [r3, #28]
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	4013      	ands	r3, r2
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	bf0c      	ite	eq
 80021c6:	2301      	moveq	r3, #1
 80021c8:	2300      	movne	r3, #0
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d0a0      	beq.n	8002116 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b097      	sub	sp, #92	@ 0x5c
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	4613      	mov	r3, r2
 80021ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	88fa      	ldrh	r2, [r7, #6]
 80021f8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	88fa      	ldrh	r2, [r7, #6]
 8002200:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002212:	d10e      	bne.n	8002232 <UART_Start_Receive_IT+0x52>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d105      	bne.n	8002228 <UART_Start_Receive_IT+0x48>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002222:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002226:	e02d      	b.n	8002284 <UART_Start_Receive_IT+0xa4>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	22ff      	movs	r2, #255	@ 0xff
 800222c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002230:	e028      	b.n	8002284 <UART_Start_Receive_IT+0xa4>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10d      	bne.n	8002256 <UART_Start_Receive_IT+0x76>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d104      	bne.n	800224c <UART_Start_Receive_IT+0x6c>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	22ff      	movs	r2, #255	@ 0xff
 8002246:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800224a:	e01b      	b.n	8002284 <UART_Start_Receive_IT+0xa4>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	227f      	movs	r2, #127	@ 0x7f
 8002250:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002254:	e016      	b.n	8002284 <UART_Start_Receive_IT+0xa4>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800225e:	d10d      	bne.n	800227c <UART_Start_Receive_IT+0x9c>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d104      	bne.n	8002272 <UART_Start_Receive_IT+0x92>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	227f      	movs	r2, #127	@ 0x7f
 800226c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002270:	e008      	b.n	8002284 <UART_Start_Receive_IT+0xa4>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	223f      	movs	r2, #63	@ 0x3f
 8002276:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800227a:	e003      	b.n	8002284 <UART_Start_Receive_IT+0xa4>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2222      	movs	r2, #34	@ 0x22
 8002290:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	3308      	adds	r3, #8
 800229a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800229c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800229e:	e853 3f00 	ldrex	r3, [r3]
 80022a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80022a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	3308      	adds	r3, #8
 80022b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80022b4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80022b6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80022ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022bc:	e841 2300 	strex	r3, r2, [r1]
 80022c0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80022c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1e5      	bne.n	8002294 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022d0:	d107      	bne.n	80022e2 <UART_Start_Receive_IT+0x102>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d103      	bne.n	80022e2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4a21      	ldr	r2, [pc, #132]	@ (8002364 <UART_Start_Receive_IT+0x184>)
 80022de:	669a      	str	r2, [r3, #104]	@ 0x68
 80022e0:	e002      	b.n	80022e8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4a20      	ldr	r2, [pc, #128]	@ (8002368 <UART_Start_Receive_IT+0x188>)
 80022e6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d019      	beq.n	8002324 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f8:	e853 3f00 	ldrex	r3, [r3]
 80022fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80022fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002300:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8002304:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800230e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002310:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002312:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002314:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002316:	e841 2300 	strex	r3, r2, [r1]
 800231a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800231c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1e6      	bne.n	80022f0 <UART_Start_Receive_IT+0x110>
 8002322:	e018      	b.n	8002356 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	e853 3f00 	ldrex	r3, [r3]
 8002330:	613b      	str	r3, [r7, #16]
   return(result);
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	f043 0320 	orr.w	r3, r3, #32
 8002338:	653b      	str	r3, [r7, #80]	@ 0x50
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002342:	623b      	str	r3, [r7, #32]
 8002344:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002346:	69f9      	ldr	r1, [r7, #28]
 8002348:	6a3a      	ldr	r2, [r7, #32]
 800234a:	e841 2300 	strex	r3, r2, [r1]
 800234e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1e6      	bne.n	8002324 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	375c      	adds	r7, #92	@ 0x5c
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	08002671 	.word	0x08002671
 8002368:	080024b5 	.word	0x080024b5

0800236c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800236c:	b480      	push	{r7}
 800236e:	b095      	sub	sp, #84	@ 0x54
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800237a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800237c:	e853 3f00 	ldrex	r3, [r3]
 8002380:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002384:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002388:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002392:	643b      	str	r3, [r7, #64]	@ 0x40
 8002394:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002396:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002398:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800239a:	e841 2300 	strex	r3, r2, [r1]
 800239e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80023a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1e6      	bne.n	8002374 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	3308      	adds	r3, #8
 80023ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	e853 3f00 	ldrex	r3, [r3]
 80023b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	3308      	adds	r3, #8
 80023c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80023c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023ce:	e841 2300 	strex	r3, r2, [r1]
 80023d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80023d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1e5      	bne.n	80023a6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d118      	bne.n	8002414 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	e853 3f00 	ldrex	r3, [r3]
 80023ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f023 0310 	bic.w	r3, r3, #16
 80023f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002400:	61bb      	str	r3, [r7, #24]
 8002402:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002404:	6979      	ldr	r1, [r7, #20]
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	e841 2300 	strex	r3, r2, [r1]
 800240c:	613b      	str	r3, [r7, #16]
   return(result);
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1e6      	bne.n	80023e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2220      	movs	r2, #32
 8002418:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002428:	bf00      	nop
 800242a:	3754      	adds	r7, #84	@ 0x54
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002440:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f7ff fa3e 	bl	80018d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002458:	bf00      	nop
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	e853 3f00 	ldrex	r3, [r3]
 8002474:	60bb      	str	r3, [r7, #8]
   return(result);
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800248a:	6979      	ldr	r1, [r7, #20]
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	e841 2300 	strex	r3, r2, [r1]
 8002492:	613b      	str	r3, [r7, #16]
   return(result);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1e6      	bne.n	8002468 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2220      	movs	r2, #32
 800249e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff fa0a 	bl	80018c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024ac:	bf00      	nop
 80024ae:	3720      	adds	r7, #32
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b09c      	sub	sp, #112	@ 0x70
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80024c2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024cc:	2b22      	cmp	r3, #34	@ 0x22
 80024ce:	f040 80be 	bne.w	800264e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80024d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80024dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80024e0:	b2d9      	uxtb	r1, r3
 80024e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ec:	400a      	ands	r2, r1
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002502:	b29b      	uxth	r3, r3
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002514:	b29b      	uxth	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	f040 80a3 	bne.w	8002662 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002524:	e853 3f00 	ldrex	r3, [r3]
 8002528:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800252a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800252c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002530:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800253a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800253c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800253e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002540:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002542:	e841 2300 	strex	r3, r2, [r1]
 8002546:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002548:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1e6      	bne.n	800251c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	3308      	adds	r3, #8
 8002554:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002558:	e853 3f00 	ldrex	r3, [r3]
 800255c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800255e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002560:	f023 0301 	bic.w	r3, r3, #1
 8002564:	667b      	str	r3, [r7, #100]	@ 0x64
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	3308      	adds	r3, #8
 800256c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800256e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002570:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002572:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002574:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002576:	e841 2300 	strex	r3, r2, [r1]
 800257a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800257c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1e5      	bne.n	800254e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2220      	movs	r2, #32
 8002586:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a34      	ldr	r2, [pc, #208]	@ (800266c <UART_RxISR_8BIT+0x1b8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d01f      	beq.n	80025e0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d018      	beq.n	80025e0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	e853 3f00 	ldrex	r3, [r3]
 80025ba:	623b      	str	r3, [r7, #32]
   return(result);
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80025c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	461a      	mov	r2, r3
 80025ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80025ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80025d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025d4:	e841 2300 	strex	r3, r2, [r1]
 80025d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80025da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1e6      	bne.n	80025ae <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d12e      	bne.n	8002646 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	e853 3f00 	ldrex	r3, [r3]
 80025fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0310 	bic.w	r3, r3, #16
 8002602:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800260c:	61fb      	str	r3, [r7, #28]
 800260e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002610:	69b9      	ldr	r1, [r7, #24]
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	e841 2300 	strex	r3, r2, [r1]
 8002618:	617b      	str	r3, [r7, #20]
   return(result);
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1e6      	bne.n	80025ee <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b10      	cmp	r3, #16
 800262c:	d103      	bne.n	8002636 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2210      	movs	r2, #16
 8002634:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800263c:	4619      	mov	r1, r3
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff f952 	bl	80018e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002644:	e00d      	b.n	8002662 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fd ffb4 	bl	80005b4 <HAL_UART_RxCpltCallback>
}
 800264c:	e009      	b.n	8002662 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	8b1b      	ldrh	r3, [r3, #24]
 8002654:	b29a      	uxth	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0208 	orr.w	r2, r2, #8
 800265e:	b292      	uxth	r2, r2
 8002660:	831a      	strh	r2, [r3, #24]
}
 8002662:	bf00      	nop
 8002664:	3770      	adds	r7, #112	@ 0x70
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40008000 	.word	0x40008000

08002670 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b09c      	sub	sp, #112	@ 0x70
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800267e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002688:	2b22      	cmp	r3, #34	@ 0x22
 800268a:	f040 80be 	bne.w	800280a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002694:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800269e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80026a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80026a6:	4013      	ands	r3, r2
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b2:	1c9a      	adds	r2, r3, #2
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f040 80a3 	bne.w	800281e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026e0:	e853 3f00 	ldrex	r3, [r3]
 80026e4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80026e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80026ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80026f8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80026fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80026fe:	e841 2300 	strex	r3, r2, [r1]
 8002702:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8002704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1e6      	bne.n	80026d8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3308      	adds	r3, #8
 8002710:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002714:	e853 3f00 	ldrex	r3, [r3]
 8002718:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800271a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271c:	f023 0301 	bic.w	r3, r3, #1
 8002720:	663b      	str	r3, [r7, #96]	@ 0x60
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3308      	adds	r3, #8
 8002728:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800272a:	643a      	str	r2, [r7, #64]	@ 0x40
 800272c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002730:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002732:	e841 2300 	strex	r3, r2, [r1]
 8002736:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1e5      	bne.n	800270a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2220      	movs	r2, #32
 8002742:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a34      	ldr	r2, [pc, #208]	@ (8002828 <UART_RxISR_16BIT+0x1b8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d01f      	beq.n	800279c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d018      	beq.n	800279c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	e853 3f00 	ldrex	r3, [r3]
 8002776:	61fb      	str	r3, [r7, #28]
   return(result);
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800277e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002788:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800278a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800278e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002790:	e841 2300 	strex	r3, r2, [r1]
 8002794:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1e6      	bne.n	800276a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d12e      	bne.n	8002802 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	e853 3f00 	ldrex	r3, [r3]
 80027b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f023 0310 	bic.w	r3, r3, #16
 80027be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027cc:	6979      	ldr	r1, [r7, #20]
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	e841 2300 	strex	r3, r2, [r1]
 80027d4:	613b      	str	r3, [r7, #16]
   return(result);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1e6      	bne.n	80027aa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f003 0310 	and.w	r3, r3, #16
 80027e6:	2b10      	cmp	r3, #16
 80027e8:	d103      	bne.n	80027f2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2210      	movs	r2, #16
 80027f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80027f8:	4619      	mov	r1, r3
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff f874 	bl	80018e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002800:	e00d      	b.n	800281e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fd fed6 	bl	80005b4 <HAL_UART_RxCpltCallback>
}
 8002808:	e009      	b.n	800281e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	8b1b      	ldrh	r3, [r3, #24]
 8002810:	b29a      	uxth	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0208 	orr.w	r2, r2, #8
 800281a:	b292      	uxth	r2, r2
 800281c:	831a      	strh	r2, [r3, #24]
}
 800281e:	bf00      	nop
 8002820:	3770      	adds	r7, #112	@ 0x70
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40008000 	.word	0x40008000

0800282c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <__libc_init_array>:
 8002840:	b570      	push	{r4, r5, r6, lr}
 8002842:	4d0d      	ldr	r5, [pc, #52]	@ (8002878 <__libc_init_array+0x38>)
 8002844:	4c0d      	ldr	r4, [pc, #52]	@ (800287c <__libc_init_array+0x3c>)
 8002846:	1b64      	subs	r4, r4, r5
 8002848:	10a4      	asrs	r4, r4, #2
 800284a:	2600      	movs	r6, #0
 800284c:	42a6      	cmp	r6, r4
 800284e:	d109      	bne.n	8002864 <__libc_init_array+0x24>
 8002850:	4d0b      	ldr	r5, [pc, #44]	@ (8002880 <__libc_init_array+0x40>)
 8002852:	4c0c      	ldr	r4, [pc, #48]	@ (8002884 <__libc_init_array+0x44>)
 8002854:	f000 f818 	bl	8002888 <_init>
 8002858:	1b64      	subs	r4, r4, r5
 800285a:	10a4      	asrs	r4, r4, #2
 800285c:	2600      	movs	r6, #0
 800285e:	42a6      	cmp	r6, r4
 8002860:	d105      	bne.n	800286e <__libc_init_array+0x2e>
 8002862:	bd70      	pop	{r4, r5, r6, pc}
 8002864:	f855 3b04 	ldr.w	r3, [r5], #4
 8002868:	4798      	blx	r3
 800286a:	3601      	adds	r6, #1
 800286c:	e7ee      	b.n	800284c <__libc_init_array+0xc>
 800286e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002872:	4798      	blx	r3
 8002874:	3601      	adds	r6, #1
 8002876:	e7f2      	b.n	800285e <__libc_init_array+0x1e>
 8002878:	08002900 	.word	0x08002900
 800287c:	08002900 	.word	0x08002900
 8002880:	08002900 	.word	0x08002900
 8002884:	08002904 	.word	0x08002904

08002888 <_init>:
 8002888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288a:	bf00      	nop
 800288c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800288e:	bc08      	pop	{r3}
 8002890:	469e      	mov	lr, r3
 8002892:	4770      	bx	lr

08002894 <_fini>:
 8002894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002896:	bf00      	nop
 8002898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289a:	bc08      	pop	{r3}
 800289c:	469e      	mov	lr, r3
 800289e:	4770      	bx	lr
